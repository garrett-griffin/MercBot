{"version":3,"sources":["../src/client.ts","../src/api/api-routes.ts","../src/api/baseAPI.ts","../src/models/baseModel.ts","../src/schema/TurnSchema.ts","../src/models/turn.ts","../src/api/turns.ts","../src/schema/PlayerSchema.ts","../src/schema/HouseholdSchema.ts","../src/schema/PrestigeImpactSchema.ts","../src/schema/WorkerSchema.ts","../src/schema/enums/SkillEnumSchema.ts","../src/schema/SustenanceSchema.ts","../src/schema/InventorySchema.ts","../src/schema/enums/ItemEnumSchema.ts","../src/schema/AccountSchema.ts","../src/schema/AccountAssetSchema.ts","../src/schema/ManagerSchema.ts","../src/schema/FlowSchema.ts","../src/schema/SettingsSchema.ts","../src/schema/NotificationSettingsSchema.ts","../src/models/player.ts","../src/api/players.ts","../src/schema/TownSchema.ts","../src/schema/LocationSchema.ts","../src/schema/TownDataSchema.ts","../src/schema/TileSchema.ts","../src/schema/StructureSchema.ts","../src/schema/enums/BuildingTypeEnumSchema.ts","../src/schema/CommonersSchema.ts","../src/schema/TownDemandCategorySchema.ts","../src/schema/TownDemandSchema.ts","../src/schema/TownGovernmentSchema.ts","../src/schema/TownGovernmentTaxesSchema.ts","../src/schema/TownChurchSchema.ts","../src/schema/TownCultureSchema.ts","../src/models/town.ts","../src/schema/MarketSchema.ts","../src/schema/MarketItemSchema.ts","../src/schema/MarketItemDetailsSchema.ts","../src/schema/ItemOrderSchema.ts","../src/models/market.ts","../src/schema/ItemTradeSchema.ts","../src/schema/ItemTradeResultSchema.ts","../src/schema/ItemTradeSettlementSchema.ts","../src/models/itemTrade.ts","../src/utils/conversion.ts","../src/utils/errors.ts","../src/api/towns.ts","../src/schema/BuildingSchema.ts","../src/schema/BuildingConstructionSchema.ts","../src/schema/DeliveryCostSchema.ts","../src/schema/ProducerSchema.ts","../src/schema/OperationSchema.ts","../src/schema/enums/RecipeEnumSchema.ts","../src/schema/BuildingStorageSchema.ts","../src/schema/enums/BuildingUpgradeTypeEnumSchema.ts","../src/schema/BuildingOperationSchema.ts","../src/models/building.ts","../src/api/buildings.ts","../src/schema/BusinessSchema.ts","../src/schema/BusinessBuildingSchema.ts","../src/models/business.ts","../src/api/businesses.ts","../src/schema/RegionSchema.ts","../src/models/region.ts","../src/api/regions.ts","../src/api/static.ts","../src/schema/ItemSchema.ts","../src/schema/enums/ItemTypeEnumSchema.ts","../src/schema/ItemPriceSchema.ts","../src/models/item.ts","../src/schema/RecipeSchema.ts","../src/schema/IngredientSchema.ts","../src/models/recipe.ts","../src/schema/TransportSchema.ts","../src/schema/TransportTypeSchema.ts","../src/schema/enums/TransportTypeEnumSchema.ts","../src/schema/TransportCargoSchema.ts","../src/schema/TradeRouteSchema.ts","../src/schema/TransportJourneySchema.ts","../src/schema/TransportJourneyLegSchema.ts","../src/schema/PathSchema.ts","../src/models/transport.ts","../src/api/transports.ts","../src/game/town.ts","../src/game/operation.ts","../src/game/recipe.ts","../src/game/building.ts","../src/game/exports.ts","../src/game/imports.ts","../src/models/account.ts","../src/models/manager.ts","../src/game/transport.ts","../src/game/storehouse.ts"],"sourcesContent":["import axios, {AxiosInstance} from 'axios';\r\nimport {apiRoutes, apiUrl} from \"./api/api-routes\";\r\nimport TurnsAPI from './api/turns';\r\nimport PlayerAPI from './api/players';\r\nimport TownsAPI from './api/towns';\r\nimport BuildingsAPI from './api/buildings';\r\nimport BusinessesAPI from './api/businesses';\r\nimport RegionsAPI from './api/regions';\r\nimport StaticAPI from './api/static';\r\nimport TransportsAPI from './api/transports';\r\nimport {RecipeEnumType} from \"./schema/enums/RecipeEnumSchema\";\r\nimport { Town } from \"./game/town\";\r\nimport { Player } from \"./game/player\";\r\nimport { BuildingOperation, Operation } from \"./game/operation\"\r\nimport {Recipe} from \"./game/recipe\";\r\nimport {Recipe as RecipeModel} from \"./models/recipe\"\r\nimport {Building} from \"./game/building\";\r\nimport {Transport} from \"./game/transport\";\r\nimport {Storehouse} from \"./game/storehouse\";\r\nimport { Operation as OperationModel } from \"./models/operation\"\r\n\r\n/**\r\n * Client for interacting with the Mercatorio API.\r\n */\r\nexport class Client {\r\n    private user: string;\r\n    private token: string;\r\n    private baseUrl: string;\r\n    private session: AxiosInstance;\r\n    endpoint: string;\r\n    buildingsApi: BuildingsAPI;\r\n    businessesApi: BusinessesAPI;\r\n    regionsApi: RegionsAPI;\r\n    playerApi: PlayerAPI;\r\n    staticApi: StaticAPI;\r\n    townsApi: TownsAPI;\r\n    transportsApi: TransportsAPI;\r\n\r\n\r\n    /**\r\n     * Creates an instance of Client.\r\n     * @param user - The API username.\r\n     * @param token - The API token.\r\n     * @param baseUrl - The base URL for the API.\r\n     */\r\n    constructor(user: string, token: string, baseUrl: string = apiUrl) {\r\n        this.user = user;\r\n        this.token = token;\r\n        this.baseUrl = baseUrl;\r\n        this.session = axios.create({\r\n            baseURL: this.baseUrl,\r\n            headers: {\r\n                'X-Merc-User': this.user,\r\n                'Authorization': `Bearer ${this.token}`,\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n        });\r\n\r\n        this.buildingsApi = new BuildingsAPI(this);\r\n        this.businessesApi = new BusinessesAPI(this);\r\n        this.regionsApi = new RegionsAPI(this);\r\n        this.playerApi = new PlayerAPI(this);\r\n        this.staticApi = new StaticAPI(this);\r\n        this.townsApi = new TownsAPI(this);\r\n        this.transportsApi = new TransportsAPI(this);\r\n    }\r\n\r\n    /**\r\n     * Makes a GET request.\r\n     * @returns The response data.\r\n     */\r\n    async get(endpoint: string): Promise<object> {\r\n        try {\r\n            const response = await this.session.get(endpoint);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw new Error(`GET ${endpoint} failed: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    /**-\r\n     * Makes a PATCH request.\r\n     * @param endpoint - The API endpoint.\r\n     * @param data - The data to send.\r\n     * @returns The response data.\r\n     */\r\n    async patch(endpoint: string, data: object): Promise<object> {\r\n        try {\r\n            return await this.session.patch(endpoint, data);\r\n        } catch (error) {\r\n            throw new Error(`PATCH ${endpoint} failed: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes a POST request.\r\n     * @param endpoint - The API endpoint.\r\n     * @param data - The data to send.\r\n     * @returns The response data.\r\n     */\r\n    async post(endpoint: string, data: object): Promise<object> {\r\n        try {\r\n            const response = await this.session.post(endpoint, data);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw new Error(`POST ${endpoint} failed: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes a PUT request.\r\n     * @param endpoint - The API endpoint.\r\n     * @param data - The data to send.\r\n     * @returns The response data.\r\n     */\r\n    async put(endpoint: string, data: object): Promise<object> {\r\n        try {\r\n            const response = await this.session.put(endpoint, data);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw new Error(`PUT ${endpoint} failed: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    get Turn(): TurnsAPI {\r\n        return new TurnsAPI(this);\r\n    }\r\n\r\n    async getTurn(): Promise<object> {\r\n        const turnAPI = new TurnsAPI(this);\r\n        return await turnAPI.get();\r\n    }\r\n\r\n    get Player(): PlayerAPI {\r\n        return new PlayerAPI(this);\r\n    }\r\n\r\n    async getPlayer(): Promise<object> {\r\n        const playerAPI = new PlayerAPI(this);\r\n        return await playerAPI.get();\r\n    }\r\n\r\n    get Towns(): TownsAPI {\r\n        return new TownsAPI(this);\r\n    }\r\n\r\n    async getTowns(filter: string[] = []): Promise<Town[]> {\r\n        const townsAPI = new TownsAPI(this);\r\n        const towns = await townsAPI.getAll();\r\n        const tasks = towns\r\n            .filter(town => !filter.length || filter.includes(town.name))\r\n            .map(town => this.getTown(town.id));\r\n        return await Promise.all(tasks) as Town[];\r\n    }\r\n\r\n    /**\r\n     * Get data for a town.\r\n     * @param id - The ID of the town.\r\n     * @returns The data for the town.\r\n     */\r\n    async getTown(id: number): Promise<Town> {\r\n        const data = await this.townsApi.getTown(id);\r\n        return new Town(this, id, data);\r\n    }\r\n\r\n    async getBuilding(player: Player, id: number): Promise<Building> {\r\n        /**\r\n         * Get a building by its ID.\r\n         *\r\n         * @param player - The player.\r\n         * @param id - The ID of the building.\r\n         *\r\n         * @returns The building with the given ID.\r\n         */\r\n        const b = new Building(this, player, id);\r\n        await b.load();\r\n\r\n        return b;\r\n    }\r\n\r\n    async getBuildingOperation(player: Player, buildingId: number): Promise<BuildingOperation> {\r\n        const buildingOperation = new BuildingOperation(this, player, buildingId);\r\n        await buildingOperation.load();\r\n        return buildingOperation;\r\n    }\r\n\r\n    async getOperation(player: Player, buildingOperation: BuildingOperation, operation: OperationModel): Promise<Operation> {\r\n        const op = new Operation(this, player, buildingOperation, operation);\r\n        await op.load();\r\n        return op;\r\n    }\r\n\r\n    async getRecipe(options: {recipe?: RecipeModel, recipeName?: RecipeEnumType}): Promise<Recipe> {\r\n        const r = new Recipe({ client: this, recipe: options.recipe, recipeName: options.recipeName});\r\n        await r.load();\r\n        return r;\r\n    }\r\n\r\n    async getStorehouse(player: Player): Promise<Storehouse> {\r\n        const storehouse = new Storehouse(this, player);\r\n        await storehouse.load();\r\n        return storehouse;\r\n    }\r\n\r\n    async getTransport(player: Player, id: number): Promise<Transport> {\r\n        const transport = new Transport(this, player, id);\r\n        await transport.load();\r\n        return transport;\r\n    }\r\n}\r\n\r\nexport default Client;\r\n","import { z } from 'zod';\r\n\r\nexport const rootUrl = 'https://play.mercatorio.io/'\r\nexport const apiUrl = rootUrl + 'api/';\r\nexport const staticUrl = rootUrl + 'static/js/';\r\n\r\nexport const apiRoutes = {\r\n    buildings: `buildings/:id`,\r\n    buildingOperations: `buildings/:id/operations`,\r\n    buildingSetManager: `buildings/:id/storage/inventory/:item`,\r\n    business: `businesses/:id`,\r\n    marketData: `towns/:id/marketdata`,\r\n    marketItem: `towns/:id/markets/:item`,\r\n    orders: `towns/:id/markets/:item/orders`,\r\n    player: `player`,\r\n    producer: `buildings/:id/producer`,\r\n    regions: `map/regions`,\r\n    towns: `towns`,\r\n    townData: `towns/:id/data`,\r\n    transports: `transports/:id`,\r\n    transportManager: `transports/:id/route/inventory/item`,\r\n    turn: `clock`,\r\n    // Add more routes here\r\n};","import Client from '../client';\r\nimport AxiosResponse from 'axios';\r\n\r\nexport interface ResponseObject {\r\n    // `data` is the response that was provided by the server\r\n    data?: object,\r\n\r\n    // `status` is the HTTP status code from the server response\r\n    status?: number,\r\n\r\n    // `statusText` is the HTTP status message from the server response\r\n    // As of HTTP/2 status text is blank or unsupported.\r\n    // (HTTP/2 RFC: https://www.rfc-editor.org/rfc/rfc7540#section-8.1.2.4)\r\n    statusText?: string,\r\n\r\n    // `headers` the HTTP headers that the server responded with\r\n    // All header names are lower cased and can be accessed using the bracket notation.\r\n    // Example: `response.headers['content-type']`\r\n    headers?: object,\r\n\r\n    // `config` is the config that was provided to `axios` for the request\r\n    config?: object,\r\n\r\n    // `request` is the request that generated this response\r\n    // It is the last ClientRequest instance in node.js (in redirects)\r\n    // and an XMLHttpRequest instance in the browser\r\n    request?: object\r\n}\r\n\r\nabstract class BaseAPI {\r\n    private client: Client;\r\n    endpoint: string;\r\n\r\n    /**\r\n     * Creates an instance of BaseAPI.\r\n     * @param client - The client to use for making requests.\r\n     */\r\n    constructor(client: Client) {\r\n        this.client = client;\r\n    }\r\n\r\n    /**\r\n     * Makes a GET request.\r\n     * @param endpoint - The API endpoint.\r\n     * @param id - The id of the object to get.\r\n     * @param item - The name of the item to get.\r\n     * @returns The response data.\r\n     */\r\n    async get({ endpoint, id, item }: { endpoint?: string, id?: number, item?: string } = {}): Promise<object> {\r\n        let url = this.endpoint;\r\n        if(endpoint) {\r\n            url = endpoint;\r\n        }\r\n        if(id) {\r\n            url.replace(':id', id.toString());\r\n        }\r\n        if(item) {\r\n            url.replace(':item', item);\r\n        }\r\n        return this.client.get(url);\r\n    }\r\n\r\n    /**\r\n     * Makes a POST request.\r\n     * @param endpoint - The API endpoint.\r\n     * @param id - The id of the object to get.\r\n     * @param item - The name of the item to get.\r\n     * @param data - The data to send.\r\n     * @returns The response data.\r\n     */\r\n    async post({ endpoint, id, item, data }: { endpoint?: string, id?: number, item?: string, data?: object } = {}): Promise<object> {\r\n        let url = this.endpoint;\r\n        if(endpoint) {\r\n            url = endpoint;\r\n        }\r\n        if(id) {\r\n            url.replace(':id', id.toString());\r\n        }\r\n        if(item) {\r\n            url.replace(':item', item);\r\n        }\r\n        return this.client.post(url, data);\r\n    }\r\n\r\n    /**\r\n     * Makes a PUT request.\r\n     * @param endpoint - The API endpoint.\r\n     * @param data - The data to send.\r\n     * @returns The response data.\r\n     */\r\n    async put({ endpoint, id, item, data }: { endpoint?: string, id?: number, item?: string, data?: object } = {}): Promise<object> {\r\n        let url = this.endpoint;\r\n        if(endpoint) {\r\n            url = endpoint;\r\n        }\r\n        if(id) {\r\n            url.replace(':id', id.toString());\r\n        }\r\n        if(item) {\r\n            url.replace(':item', item);\r\n        }\r\n        return this.client.put(url, data);\r\n    }\r\n\r\n    /**\r\n     * Makes a PATCH request.\r\n     * @param endpoint - The API endpoint.\r\n     * @param data - The data to send.\r\n     * @returns The response data.\r\n     */\r\n    async patch({ endpoint, id, item, data }: { endpoint?: string, id?: number, item?: string, data?: object } = {}): Promise<object> {\r\n        let url = this.endpoint;\r\n        if(endpoint) {\r\n            url = endpoint;\r\n        }\r\n        if(id) {\r\n            url.replace(':id', id.toString());\r\n        }\r\n        if(item) {\r\n            url.replace(':item', item);\r\n        }\r\n        return this.client.patch(url, data);\r\n    }\r\n}\r\n\r\nexport default BaseAPI;\r\n","import { z } from 'zod';\r\n\r\nexport abstract class BaseModel {\r\n    static schema: z.Schema;\r\n\r\n    static async validate(data: unknown): Promise<any> {\r\n        try {\r\n            return await this.schema.parse(data);\r\n        } catch (errors) {\r\n            throw new Error('Validation failed: ' + errors);\r\n        }\r\n    }\r\n}","import { z } from 'zod';\r\n\r\nexport const TurnSchema = z.object({\r\n    turn: z.number(),\r\n    month: z.string().optional(),\r\n    year: z.number().optional()\r\n});\r\n\r\nexport type TurnType = z.infer<typeof TurnSchema>;\r\n","import { BaseModel } from './baseModel';\r\nimport { TurnSchema, TurnType } from '../schema/TurnSchema';\r\n\r\nexport class Turn extends BaseModel implements TurnType {\r\n    static schema = TurnSchema;\r\n\r\n    turn: number;\r\n    month: string | null;\r\n    year: number | null;\r\n}","import BaseAPI from './baseAPI';\r\nimport { apiRoutes } from \"./api-routes\";\r\nimport { Turn } from '../models/turn';\r\n\r\nclass TurnsAPI extends BaseAPI {\r\n    endpoint: string = apiRoutes.turn;\r\n\r\n    /**\r\n     * Get the current turn data.\r\n     * @returns The current turn data.\r\n     */\r\n    async get(): Promise<Turn> {\r\n        try {\r\n            const response = await super.get();\r\n            return Turn.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch turn data: ${(error as Error).message}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport default TurnsAPI;\r\n","import { z } from 'zod';\r\nimport { HouseholdSchema } from './HouseholdSchema';\r\nimport { SettingsSchema } from './SettingsSchema';\r\n\r\nexport const PlayerSchema = z.object({\r\n    username: z.string(),\r\n    household: HouseholdSchema,\r\n    discord_id: z.string().optional(),\r\n    settings: SettingsSchema,\r\n    active: z.boolean()\r\n});\r\n\r\nexport type PlayerType = z.infer<typeof PlayerSchema>;\r\n","import { z } from 'zod';\r\nimport { PrestigeImpactSchema } from './PrestigeImpactSchema';\r\nimport { WorkerSchema } from './WorkerSchema';\r\nimport { SustenanceSchema } from \"./SustenanceSchema\";\r\n\r\n\r\nexport const HouseholdSchema = z.object({\r\n    id: z.string(),\r\n    name: z.string(),\r\n    town_id: z.number(),\r\n    portrait: z.string(),\r\n    gender: z.string(),\r\n    account_id: z.string(),\r\n    business_ids: z.array(z.string()),\r\n    prestige: z.number(),\r\n    prestige_impacts: z.array(PrestigeImpactSchema).optional(),\r\n    workers: z.array(WorkerSchema),\r\n    operations: z.array(z.string()),\r\n    caps: z.record(z.string(), z.number()),\r\n    sustenance: SustenanceSchema,\r\n});\r\n\r\nexport type HouseholdType = z.infer<typeof HouseholdSchema>;\r\n","import { z } from 'zod';\r\n\r\n\r\nexport const PrestigeImpactSchema = z.object({\r\n    factor: z.string(),\r\n    impact: z.number(),\r\n});\r\n\r\nexport type PrestigeImpactType = z.infer<typeof PrestigeImpactSchema>;\r\n","import { z } from 'zod';\r\nimport { SkillEnumSchema } from './enums/SkillEnumSchema';\r\n\r\nexport const WorkerSchema = z.object({\r\n    assignment: z.string(),\r\n    capacity: z.number(),\r\n    name: z.string(),\r\n    skills: z.record(SkillEnumSchema, z.number()), // Using z.record to define a dictionary with Skill as key and float as value\r\n});\r\n\r\nexport type WorkerType = z.infer<typeof WorkerSchema>;","import { z } from 'zod';\r\n\r\nexport const SkillEnumSchema = z.enum([\r\n    \"crafting\",\r\n    \"forging\",\r\n    \"maritime\",\r\n    \"mercantile\",\r\n    \"nutrition\",\r\n    \"textile\",\r\n    \"weaponry\"\r\n]);\r\n\r\nexport type SkillEnumType = z.infer<typeof SkillEnumSchema>;\r\n","import { z } from 'zod';\r\nimport { InventorySchema } from './InventorySchema';\r\n\r\nexport const SustenanceSchema = z.object({\r\n    reference: z.string(),\r\n    inventory: InventorySchema,\r\n    provider_id: z.string().optional(),\r\n});\r\n\r\nexport type SustenanceType = z.infer<typeof SustenanceSchema>;","import { z } from 'zod';\r\nimport { ItemEnumSchema } from './enums/ItemEnumSchema';\r\nimport { AccountSchema } from './AccountSchema';\r\nimport { ManagerSchema } from './ManagerSchema';\r\nimport { FlowSchema } from './FlowSchema';\r\n\r\nexport const InventorySchema = z.object({\r\n    account: AccountSchema,\r\n    capacity: z.number(),\r\n    managers: z.map(ItemEnumSchema, ManagerSchema).optional(),\r\n    previous_flows: z.record(ItemEnumSchema, FlowSchema).optional().default({}),\r\n    reserved: z.number().optional(),\r\n});\r\n\r\nexport type InventoryType = z.infer<typeof InventorySchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const ItemEnumSchema = z.enum([\r\n    \"alembics\",\r\n    \"arms\",\r\n    \"axes\",\r\n    \"beer\",\r\n    \"belts\",\r\n    \"blades\",\r\n    \"bread\",\r\n    \"bricks\",\r\n    \"butter\",\r\n    \"candles\",\r\n    \"carting\",\r\n    \"casks\",\r\n    \"cattle\",\r\n    \"charcoal\",\r\n    \"cheese\",\r\n    \"clay\",\r\n    \"cloth\",\r\n    \"coats\",\r\n    \"cog\",\r\n    \"cookware\",\r\n    \"copper ingots\",\r\n    \"copper ore\",\r\n    \"cured fish\",\r\n    \"cured meat\",\r\n    \"donations\",\r\n    \"dye\",\r\n    \"dyed cloth\",\r\n    \"firewood\",\r\n    \"fish\",\r\n    \"flax fibres\",\r\n    \"flax plants\",\r\n    \"flour\",\r\n    \"furniture\",\r\n    \"garments\",\r\n    \"glass\",\r\n    \"glassware\",\r\n    \"gold bars\",\r\n    \"gold ore\",\r\n    \"grain\",\r\n    \"grindstones\",\r\n    \"ham\",\r\n    \"handcart\",\r\n    \"harnesses\",\r\n    \"herbs\",\r\n    \"hides\",\r\n    \"honey\",\r\n    \"hop beer\",\r\n    \"hulk\",\r\n    \"iron ore\",\r\n    \"jewellery\",\r\n    \"labour\",\r\n    \"lead bars\",\r\n    \"lead ore\",\r\n    \"leather\",\r\n    \"light armor\",\r\n    \"limestone\",\r\n    \"lodging\",\r\n    \"lumber\",\r\n    \"malt\",\r\n    \"manure\",\r\n    \"meat\",\r\n    \"medicine\",\r\n    \"milk\",\r\n    \"money\",\r\n    \"mouldboards\",\r\n    \"nails\",\r\n    \"nets\",\r\n    \"ox power\",\r\n    \"pasties\",\r\n    \"pickaxes\",\r\n    \"pies\",\r\n    \"ploughs\",\r\n    \"protection\",\r\n    \"resin\",\r\n    \"rope\",\r\n    \"sails\",\r\n    \"salt\",\r\n    \"scythes\",\r\n    \"silver bars\",\r\n    \"slaked lime\",\r\n    \"snekkja\",\r\n    \"spirits\",\r\n    \"steel ingots\",\r\n    \"stockfish\",\r\n    \"swords\",\r\n    \"tar\",\r\n    \"thread\",\r\n    \"tiles\",\r\n    \"timber\",\r\n    \"tools\",\r\n    \"tumbrel\",\r\n    \"wax\",\r\n    \"wheels\",\r\n    \"windows\",\r\n    \"wine\",\r\n    \"wool\",\r\n    \"wrought iron\",\r\n    \"yarn\"\r\n]);\r\n\r\nexport type ItemEnumType = z.infer<typeof ItemEnumSchema>;\r\n","import { z } from 'zod';\r\nimport { ItemEnumSchema } from './enums/ItemEnumSchema';\r\nimport { AccountAssetSchema } from './AccountAssetSchema';\r\n\r\nexport const AccountSchema = z.object({\r\n    assets: z.map(ItemEnumSchema, AccountAssetSchema),\r\n    id: z.string(),\r\n    master_id: z.string().optional(),\r\n    name: z.string().optional(),\r\n    owner_id: z.number(),\r\n    sponsor_id: z.string().optional()\r\n});\r\n\r\nexport type AccountType = z.infer<typeof AccountSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const AccountAssetSchema = z.object({\r\n    balance: z.number(),\r\n    capacity: z.number().optional(),\r\n    purchase: z.number().optional(),\r\n    purchase_price: z.number().optional(),\r\n    reserved: z.number(),\r\n    reserved_capacity: z.number().optional(),\r\n    sale: z.number().optional(),\r\n    sale_price: z.number().optional(),\r\n    unit_cost: z.number().optional()\r\n});\r\n\r\nexport type AccountAssetType = z.infer<typeof AccountAssetSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const ManagerSchema = z.object({\r\n    buy_price: z.number().optional(),\r\n    buy_volume: z.number().optional(),\r\n    capacity: z.number().optional(),\r\n    max_holding: z.number().optional(),\r\n    sell_price: z.number().optional(),\r\n    sell_volume: z.number().optional()\r\n});\r\n\r\nexport type ManagerType = z.infer<typeof ManagerSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const FlowSchema = z.object({\r\n    consumption: z.number().optional().default(0.0),\r\n    expiration: z.number().optional().default(0.0),\r\n    export: z.number().optional(),\r\n    imported: z.number().optional().nullable().default(null).describe('import'),\r\n    production: z.number().optional().default(0.0),\r\n    production_cost: z.number().optional().default(0.0),\r\n    purchase: z.number().optional(),\r\n    purchase_cost: z.number().optional().default(0.0),\r\n    resident: z.number().optional(),\r\n    sale: z.number().optional(),\r\n    sale_value: z.number().optional().default(0.0),\r\n    shortfall: z.number().optional().default(0.0)\r\n});\r\n\r\nexport type FlowType = z.infer<typeof FlowSchema>;\r\n","import { z } from 'zod';\r\nimport { NotificationSettingsSchema } from './NotificationSettingsSchema';\r\n\r\nexport const SettingsSchema = z.object({\r\n    sound_volume: z.number(),\r\n    notifications: NotificationSettingsSchema,\r\n    commoners_splash: z.boolean(),\r\n    construction_splash: z.boolean(),\r\n    land_purchase_splash: z.boolean(),\r\n    operations_splash: z.boolean(),\r\n    production_splash: z.boolean(),\r\n    recipes_splash: z.boolean(),\r\n    sustenance_splash: z.boolean(),\r\n    trading_splash: z.boolean(),\r\n    trade_config_splash: z.boolean(),\r\n    welcome_splash: z.boolean(),\r\n    first_building_splash: z.boolean(),\r\n    warehouse_splash: z.boolean(),\r\n});\r\n\r\nexport type SettingsType = z.infer<typeof SettingsSchema>;","import { z } from 'zod';\r\n\r\nexport const NotificationSettingsSchema = z.object({\r\n    discord: z.boolean(),\r\n    mutes: z.array(z.string()).optional().default([]),\r\n});\r\n\r\nexport type NotificationSettingsType = z.infer<typeof NotificationSettingsSchema>;","import { BaseModel } from './baseModel';\r\nimport { PlayerSchema, PlayerType } from '../schema/PlayerSchema';\r\nimport { HouseholdSchema, HouseholdType } from '../schema/HouseholdSchema';\r\nimport { PrestigeImpactSchema, PrestigeImpactType } from '../schema/PrestigeImpactSchema';\r\nimport { WorkerSchema, WorkerType } from '../schema/WorkerSchema';\r\nimport { SustenanceSchema, SustenanceType } from '../schema/SustenanceSchema';\r\nimport { SettingsSchema, SettingsType } from '../schema/SettingsSchema';\r\nimport { NotificationSettingsSchema, NotificationSettingsType } from '../schema/NotificationSettingsSchema';\r\nimport {SkillEnumType} from \"../schema/enums/SkillEnumSchema\";\r\nimport {Inventory} from \"./inventory\";\r\n\r\nexport class Player extends BaseModel implements PlayerType {\r\n    static schema = PlayerSchema;\r\n\r\n    username: string;\r\n    household: Household;\r\n    discord_id: string | null;\r\n    settings: Settings;\r\n    active: boolean;\r\n}\r\n\r\nexport class Household extends BaseModel implements HouseholdType {\r\n    static schema = HouseholdSchema;\r\n\r\n    id: string;\r\n    name: string;\r\n    town_id: number;\r\n    portrait: string;\r\n    gender: string;\r\n    account_id: string;\r\n    business_ids: string[];\r\n    prestige: number;\r\n    prestige_impacts: PrestigeImpact[] | null;\r\n    workers: Worker[];\r\n    operations: string[];\r\n    caps: Record<string, number>;\r\n    sustenance: Sustenance;\r\n}\r\n\r\nexport class PrestigeImpact extends BaseModel implements PrestigeImpactType {\r\n    static schema = PrestigeImpactSchema;\r\n\r\n    factor: string;\r\n    impact: number;\r\n}\r\n\r\nexport class Worker extends BaseModel implements WorkerType {\r\n    static schema = WorkerSchema;\r\n\r\n    assignment: string;\r\n    capacity: number;\r\n    name: string;\r\n    skills: Record<SkillEnumType, number>;\r\n}\r\n\r\nexport class Sustenance extends BaseModel implements SustenanceType {\r\n    static schema = SustenanceSchema;\r\n\r\n    reference: string;\r\n    inventory: Inventory;\r\n    provider_id: string | null;\r\n}\r\n\r\nexport class Settings extends BaseModel implements SettingsType {\r\n    static schema = SettingsSchema;\r\n\r\n    sound_volume: number;\r\n    notifications: NotificationSettings;\r\n    commoners_splash: boolean;\r\n    construction_splash: boolean;\r\n    land_purchase_splash: boolean;\r\n    operations_splash: boolean;\r\n    production_splash: boolean;\r\n    recipes_splash: boolean;\r\n    sustenance_splash: boolean;\r\n    trading_splash: boolean;\r\n    trade_config_splash: boolean;\r\n    welcome_splash: boolean;\r\n    first_building_splash: boolean;\r\n    warehouse_splash: boolean;\r\n}\r\n\r\nexport class NotificationSettings extends BaseModel implements NotificationSettingsType {\r\n    static schema = NotificationSettingsSchema;\r\n\r\n    discord: boolean;\r\n    mutes: string[] | null;\r\n}","import BaseAPI from './baseAPI';\r\nimport { apiRoutes } from \"./api-routes\";\r\nimport { Player } from '../models/player';\r\n\r\nclass PlayersAPI extends BaseAPI {\r\n    endpoint: string = apiRoutes.player;\r\n\r\n    async get(): Promise<Player> {\r\n        try {\r\n            const response = await super.get();\r\n            return Player.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch player data: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport default PlayersAPI;\r\n","import { z } from 'zod';\r\nimport { LocationSchema } from './LocationSchema';\r\n\r\n\r\nexport const TownSchema = z.object({\r\n    id: z.number(),\r\n    name: z.string(),\r\n    location: LocationSchema,\r\n    region: z.number(),\r\n    capital: z.boolean().default(false)\r\n});\r\n\r\nexport type TownType = z.infer<typeof TownSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const LocationSchema = z.object({\r\n    x: z.number(),\r\n    y: z.number()\r\n});\r\n\r\nexport type LocationType = z.infer<typeof LocationSchema>;\r\n","import { z } from 'zod';\r\nimport { LocationSchema } from './LocationSchema';\r\nimport { TileSchema } from './TileSchema';\r\nimport { CommonersSchema } from './CommonersSchema';\r\nimport { TownGovernmentSchema } from './TownGovernmentSchema';\r\nimport { TownChurchSchema } from './TownChurchSchema';\r\nimport {TownCultureSchema, TownCultureType} from './TownCultureSchema';\r\n\r\nexport const TownDataSchema = z.object({\r\n    id: z.string(),\r\n    name: z.string(),\r\n    location: LocationSchema,\r\n    region: z.number(),\r\n    center_ids: z.array(z.number()),\r\n    domain: z.record(z.string(), TileSchema),\r\n    household_ids: z.array(z.string()),\r\n    commoners: CommonersSchema,\r\n    government: TownGovernmentSchema,\r\n    church: TownChurchSchema,\r\n    navigation_zones: z.record(z.number(), z.number()),\r\n    culture: TownCultureSchema\r\n});\r\n\r\nexport type TownDataType = z.infer<typeof TownDataSchema>;\r\n","import { z } from 'zod';\r\nimport { StructureSchema } from './StructureSchema';\r\n\r\n\r\nexport const TileSchema = z.object({\r\n    owner_id: z.string().optional(),\r\n    structure: StructureSchema.optional(),\r\n    ask_price: z.string().optional()\r\n});\r\n\r\nexport type TileType = z.infer<typeof TileSchema>;\r\n","import { z } from 'zod';\r\nimport { BuildingTypeEnumSchema } from './enums/BuildingTypeEnumSchema';\r\n\r\nexport const StructureSchema = z.object({\r\n    id: z.string(),\r\n    type: BuildingTypeEnumSchema,\r\n    tags: z.array(z.string()).optional()\r\n});\r\n\r\nexport type StructureType = z.infer<typeof StructureSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const BuildingTypeEnumSchema = z.enum([\r\n    \"apothecary\",\r\n    \"bakery\",\r\n    \"bloomery\",\r\n    \"boardinghouse\",\r\n    \"brewery\",\r\n    \"brickworks\",\r\n    \"butchery\",\r\n    \"carpentry\",\r\n    \"cartshed\",\r\n    \"cathedral\",\r\n    \"center\",\r\n    \"ceramic kiln\",\r\n    \"chandlery\",\r\n    \"chapel\",\r\n    \"charcoal hut\",\r\n    \"charcoal kiln\",\r\n    \"church\",\r\n    \"clay pit\",\r\n    \"copper mine\",\r\n    \"coppersmith\",\r\n    \"cottage\",\r\n    \"dairy\",\r\n    \"dye boiler\",\r\n    \"dyeworks\",\r\n    \"farmstead\",\r\n    \"fisher\",\r\n    \"fishing shack\",\r\n    \"flax farm\",\r\n    \"foundry\",\r\n    \"glass blower\",\r\n    \"glass house\",\r\n    \"gold mine\",\r\n    \"grain farm\",\r\n    \"guardhouse\",\r\n    \"herb garden\",\r\n    \"hjell\",\r\n    \"household\",\r\n    \"hunting lodge\",\r\n    \"iron mine\",\r\n    \"jeweller\",\r\n    \"lead mine\",\r\n    \"leatherworks\",\r\n    \"logging camp\",\r\n    \"markethall\",\r\n    \"malthouse\",\r\n    \"mansion\",\r\n    \"mint\",\r\n    \"net maker\",\r\n    \"outpost\",\r\n    \"park\",\r\n    \"pasture\",\r\n    \"quarry\",\r\n    \"retting pit\",\r\n    \"ropewalk\",\r\n    \"sail loft\",\r\n    \"saltery\",\r\n    \"salt mine\",\r\n    \"sawmill\",\r\n    \"sewing shop\",\r\n    \"shipyard\",\r\n    \"smithy\",\r\n    \"smokery\",\r\n    \"spinnery\",\r\n    \"stable\",\r\n    \"storehouse\",\r\n    \"square\",\r\n    \"tannery\",\r\n    \"tar kiln\",\r\n    \"toolworks\",\r\n    \"townhall\",\r\n    \"townhouse\",\r\n    \"townroad\",\r\n    \"vignoble\",\r\n    \"warehouse\",\r\n    \"weavery\",\r\n    \"windmill\"\r\n]);\r\n\r\nexport type BuildingTypeEnumType = z.infer<typeof BuildingTypeEnumSchema>;\r\n","import { z } from 'zod';\r\nimport { TownDemandCategorySchema } from './TownDemandCategorySchema';\r\n\r\nexport const CommonersSchema = z.object({\r\n    account_id: z.string(),\r\n    count: z.number(),\r\n    migration: z.number(),\r\n    sustenance: z.array(TownDemandCategorySchema)\r\n});\r\n\r\nexport type CommonersType = z.infer<typeof CommonersSchema>;\r\n","import { z } from 'zod';\r\nimport { TownDemandSchema } from './TownDemandSchema';\r\n\r\n\r\nexport const TownDemandCategorySchema = z.object({\r\n    name: z.string(),\r\n    products: z.array(TownDemandSchema)\r\n});\r\n\r\nexport type TownDemandCategoryType = z.infer<typeof TownDemandCategorySchema>;\r\n","import { z } from 'zod';\r\nimport { ItemEnumSchema } from './enums/ItemEnumSchema';\r\n\r\n\r\nexport const TownDemandSchema = z.object({\r\n    product: ItemEnumSchema,\r\n    bonus: z.number().default(0.0),\r\n    desire: z.number().default(0.0),\r\n    request: z.number().default(0.0),\r\n    result: z.number().default(0.0)\r\n});\r\n\r\nexport type TownDemandType = z.infer<typeof TownDemandSchema>;\r\n","import { z } from 'zod';\r\nimport { TownDemandSchema } from './TownDemandSchema';\r\nimport { TownGovernmentTaxesSchema } from './TownGovernmentTaxesSchema';\r\n\r\n\r\nexport const TownGovernmentSchema = z.object({\r\n    account_id: z.string(),\r\n    demands: z.array(TownDemandSchema),\r\n    taxes_collected: TownGovernmentTaxesSchema\r\n});\r\n\r\nexport type TownGovernmentType = z.infer<typeof TownGovernmentSchema>;\r\n","import { z } from 'zod';\r\n\r\n\r\nexport const TownGovernmentTaxesSchema = z.object({\r\n    land_tax: z.number().optional().default(0.0),\r\n    structure_tax: z.number().optional().default(0.0),\r\n    ferry_fees: z.number().optional().default(0.0)\r\n});\r\n\r\nexport type TownGovernmentTaxesType = z.infer<typeof TownGovernmentTaxesSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const TownChurchSchema = z.object({\r\n    project_ids: z.array(z.string()).optional()\r\n});\r\n\r\nexport type TownChurchType = z.infer<typeof TownChurchSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const TownCultureSchema = z.object({\r\n    special_market_pressure: z.record(z.number(), z.number()).optional()\r\n});\r\n\r\nexport type TownCultureType = z.infer<typeof TownCultureSchema>;\r\n","import { BaseModel } from './baseModel';\r\nimport { TownSchema, TownType } from '../schema/TownSchema';\r\nimport { TownDataSchema, TownDataType } from '../schema/TownDataSchema';\r\nimport {TownDemandCategorySchema, TownDemandCategoryType} from \"../schema/TownDemandCategorySchema\";\r\nimport {TownDemandSchema, TownDemandType} from \"../schema/TownDemandSchema\";\r\nimport { Location } from './location'\r\nimport {Commoners} from \"./commoners\";\r\nimport {TownGovernmentType} from \"../schema/TownGovernmentSchema\";\r\nimport {TownChurchType} from \"../schema/TownChurchSchema\";\r\nimport {TownCultureType} from \"../schema/TownCultureSchema\";\r\nimport {Tile} from \"./tile\";\r\nimport {ItemEnumType} from \"../schema/enums/ItemEnumSchema\";\r\n\r\nexport class Town extends BaseModel implements TownType {\r\n    static schema = TownSchema;\r\n\r\n    id: number;\r\n    name: string;\r\n    location: Location;\r\n    region: number;\r\n    capital: boolean;\r\n}\r\n\r\nexport class TownData extends BaseModel implements TownDataType {\r\n    static schema = TownDataSchema;\r\n\r\n    id: string;\r\n    name: string;\r\n    location: Location;\r\n    region: number;\r\n    center_ids: number[];\r\n    domain: Record<string, Tile>;\r\n    household_ids: string[];\r\n    commoners: Commoners;\r\n    government: TownGovernmentType;\r\n    church: TownChurchType;\r\n    navigation_zones: Record<number, number>;\r\n    culture: TownCultureType;\r\n}\r\n\r\nexport class TownDemand extends BaseModel implements TownDemandType {\r\n    static schema = TownDemandSchema;\r\n\r\n    product: ItemEnumType;\r\n    bonus: number;\r\n    desire: number;\r\n    request: number;\r\n    result: number;\r\n}\r\n\r\nexport class TownDemandCategory extends BaseModel implements TownDemandCategoryType {\r\n    static schema = TownDemandCategorySchema;\r\n    name: string;\r\n    products: TownDemand[];\r\n}","import { z } from 'zod';\r\nimport { MarketItemSchema } from './MarketItemSchema';\r\nimport {ItemEnumSchema} from \"./enums/ItemEnumSchema\";\r\n\r\nexport const MarketSchema = z.object({\r\n    markets: z.record(ItemEnumSchema, MarketItemSchema),\r\n    ts: z.number().describe('_ts')\r\n});\r\n\r\nexport type MarketType = z.infer<typeof MarketSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const MarketItemSchema = z.object({\r\n    price: z.number().optional().default(0.0),\r\n    last_price: z.number().optional().default(0.0),\r\n    average_price: z.number().optional().default(0.0),\r\n    moving_average: z.number().optional().default(0.0),\r\n    highest_bid: z.number().optional().default(0.0),\r\n    lowest_ask: z.number().optional().default(0.0),\r\n    volume: z.number(),\r\n    volume_prev_12: z.number().optional().default(0),\r\n    bid_volume_10: z.number().optional().default(0),\r\n    ask_volume_10: z.number().optional().default(0)\r\n});\r\n\r\nexport type MarketItemType = z.infer<typeof MarketItemSchema>;\r\n","import { z } from 'zod';\r\nimport { MarketItemSchema } from './MarketItemSchema';\r\nimport { ItemOrderSchema } from './ItemOrderSchema';\r\nimport {ItemEnumSchema} from \"./enums/ItemEnumSchema\";\r\n\r\nexport const MarketItemDetailsSchema = z.object({\r\n    id: z.number(),\r\n    product: ItemEnumSchema,\r\n    asset: ItemEnumSchema,\r\n    currency: z.string(),\r\n    bids: z.array(ItemOrderSchema),\r\n    asks: z.array(ItemOrderSchema),\r\n    data: MarketItemSchema\r\n});\r\n\r\nexport type MarketItemDetailsType = z.infer<typeof MarketItemDetailsSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const ItemOrderSchema = z.object({\r\n    volume: z.number(),\r\n    price: z.number()\r\n});\r\n\r\nexport type ItemOrderType = z.infer<typeof ItemOrderSchema>;\r\n","import { BaseModel } from './baseModel';\r\nimport { MarketSchema, MarketType } from '../schema/MarketSchema';\r\nimport { MarketItemDetailsSchema, MarketItemDetailsType } from '../schema/MarketItemDetailsSchema';\r\nimport { MarketItemSchema, MarketItemType } from \"../schema/MarketItemSchema\";\r\nimport {ItemEnumType} from \"../schema/enums/ItemEnumSchema\";\r\nimport {ItemOrderType} from \"../schema/ItemOrderSchema\";\r\n\r\nexport class Market extends BaseModel implements MarketType {\r\n    static schema = MarketSchema;\r\n\r\n    markets: Record<ItemEnumType, MarketItem>;\r\n    ts: number;\r\n}\r\nexport class MarketItem extends BaseModel implements MarketItemType {\r\n    static schema = MarketItemSchema;\r\n\r\n    price: number | null;\r\n    last_price: number | null;\r\n    average_price: number | null;\r\n    moving_average: number | null;\r\n    highest_bid: number | null;\r\n    lowest_ask: number | null;\r\n    volume: number;\r\n    volume_prev_12: number | null;\r\n    bid_volume_10: number | null;\r\n    ask_volume_10: number | null;\r\n}\r\n\r\nexport class MarketItemDetails extends BaseModel implements MarketItemDetailsType {\r\n    static schema = MarketItemDetailsSchema;\r\n\r\n    id: number;\r\n    product: ItemEnumType;\r\n    asset: ItemEnumType;\r\n    currency: string;\r\n    bids: ItemOrderType[];\r\n    asks: ItemOrderType[];\r\n    data: MarketItem;\r\n}","import { z } from 'zod';\r\n\r\nexport const ItemTradeSchema = z.object({\r\n    direction: z.string(),\r\n    expected_balance: z.number(),\r\n    operation: z.string(),\r\n    price: z.number(),\r\n    volume: z.number()\r\n});\r\n\r\nexport type ItemTradeType = z.infer<typeof ItemTradeSchema>;\r\n","import { z } from 'zod';\r\nimport { ItemTradeSettlementSchema } from './ItemTradeSettlementSchema';\r\n\r\nexport const ItemTradeResultSchema = z.object({\r\n    settlements: z.array(ItemTradeSettlementSchema).optional(),\r\n    order_id: z.number().optional(),\r\n    embedded: z.record(z.string(), z.any()).optional().default({})\r\n});\r\n\r\nexport type ItemTradeResultType = z.infer<typeof ItemTradeResultSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const ItemTradeSettlementSchema = z.object({\r\n    volume: z.number(),\r\n    price: z.number()\r\n});\r\n\r\nexport type ItemTradeSettlementType = z.infer<typeof ItemTradeSettlementSchema>;\r\n","import { BaseModel } from './baseModel';\r\nimport { ItemTradeSchema, ItemTradeType } from '../schema/ItemTradeSchema';\r\nimport {ItemTradeResultSchema, ItemTradeResultType} from \"../schema/ItemTradeResultSchema\";\r\nimport {ItemTradeSettlementSchema, ItemTradeSettlementType} from \"../schema/ItemTradeSettlementSchema\";\r\n\r\nexport class ItemTrade extends BaseModel implements ItemTradeType {\r\n    direction: string;\r\n    expectedBalance: number;\r\n    operation: string;\r\n    price: number;\r\n    volume: number;\r\n\r\n    constructor(\r\n        direction: string,\r\n        expectedBalance: number,\r\n        operation: string,\r\n        price: number,\r\n        volume: number\r\n    ) {\r\n        super(); // Call the parent constructor\r\n        this.direction = direction;\r\n        this.expectedBalance = expectedBalance;\r\n        this.operation = operation;\r\n        this.price = price;\r\n        this.volume = volume;\r\n    }\r\n\r\n    static schema = ItemTradeSchema;\r\n}\r\n\r\nexport class ItemTradeResult extends BaseModel implements ItemTradeResultType {\r\n    static schema = ItemTradeResultSchema;\r\n\r\n    settlements: ItemTradeSettlement[] | null;\r\n    order_id: number | null;\r\n    embedded: Record<string, any>;\r\n}\r\n\r\nexport class ItemTradeSettlement extends BaseModel implements ItemTradeSettlementType {\r\n    static schema = ItemTradeSettlementSchema;\r\n\r\n    volume: number;\r\n    price: number;\r\n}","/**\r\n * Converts floats in an object to strings.\r\n *\r\n * @param obj - The object to convert.\r\n * @returns The object with floats converted to strings.\r\n */\r\nfunction convertFloatsToStrings(obj: any): any {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return obj;\r\n    }\r\n\r\n    const convertedObj: { [key: string]: any } = {};\r\n    for (const [key, value] of Object.entries(obj)) {\r\n        if (typeof value === 'object' && value !== null) {\r\n            convertedObj[key] = convertFloatsToStrings(value);\r\n        } else if (typeof value === 'number' && !Number.isInteger(value)) {\r\n            convertedObj[key] = value.toString();\r\n        } else {\r\n            convertedObj[key] = value;\r\n        }\r\n    }\r\n\r\n    return convertedObj;\r\n}\r\n\r\nexport {\r\n    convertFloatsToStrings,\r\n};\r\n","class TurnInProgressException extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'TurnInProgressException';\r\n    }\r\n}\r\n\r\nclass BuySellOrderFailedException extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'BuySellOrderFailedException';\r\n    }\r\n}\r\n\r\nclass SetManagerFailedException extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'SetManagerFailedException';\r\n    }\r\n}\r\n\r\nexport {\r\n    TurnInProgressException,\r\n    BuySellOrderFailedException,\r\n    SetManagerFailedException,\r\n};","import BaseAPI from './baseAPI';\r\nimport { ResponseObject } from \"./baseAPI\";\r\nimport { apiRoutes } from \"./api-routes\";\r\nimport { Town, TownData } from '../models/town';\r\nimport { Market, MarketItemDetails } from '../models/market';\r\nimport { ItemEnumType } from \"../schema/enums/ItemEnumSchema\";\r\nimport {ItemTrade, ItemTradeResult} from \"../models/itemTrade\";\r\nimport { convertFloatsToStrings, BuySellOrderFailedException } from '../utils'\r\n\r\nclass TownsAPI extends BaseAPI {\r\n\r\n    endpoint: string = apiRoutes.towns;\r\n\r\n    /**\r\n     * Get a list of all towns in the game.\r\n     * @returns A list of all towns in the game.\r\n     */\r\n    async getAll(): Promise<Town[]> {\r\n        try {\r\n            const response = await super.get() as unknown[];\r\n            return response.map((townData: unknown) => Town.validate(townData) as unknown as Town);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch towns: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get data for a town.\r\n     * @param id - The ID of the town.\r\n     * @returns The data for the town.\r\n     */\r\n    async get({ id }: { endpoint?: string, id?: number, item?: string } = {}): Promise<TownData> {\r\n        try {\r\n            const response = await super.get({ endpoint: apiRoutes.townData, id });\r\n            return TownData.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch town data for ID ${id}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get data for a town.\r\n     * @param id - The ID of the town.\r\n     * @returns The data for the town.\r\n     */\r\n    async getTown(id: number): Promise<TownData> {\r\n        return await this.get({id});\r\n    }\r\n\r\n    /**\r\n     * Get data for a town.\r\n     * @param id - The ID of the town.\r\n     * @returns The data for the town.\r\n     */\r\n    async getTownData(id: number): Promise<TownData> {\r\n        return await this.get({id});\r\n    }\r\n\r\n    /**\r\n     * Get market data for a town.\r\n     * @param id - The ID of the town.\r\n     * @returns The market data for the town.\r\n     */\r\n    async getMarketData(id: number): Promise<Market> {\r\n        try {\r\n            const response = await super.get({ endpoint: apiRoutes.marketData, id });\r\n            return Market.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch market data for town ID ${id}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the market overview for an item in a town.\r\n     * @param townId - The ID of the town.\r\n     * @param item - The item to get the overview for.\r\n     * @returns The market overview for the town.\r\n     */\r\n    async getMarketItem(townId: number, item: ItemEnumType): Promise<MarketItemDetails> {\r\n        try {\r\n            const response = await super.get( {endpoint: apiRoutes.marketItem, id: townId, item});\r\n            return MarketItemDetails.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch market item data for town ID ${townId} and item ${item}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    async sendBuyOrder(\r\n        item: ItemEnumType,\r\n        id: number,\r\n        expectedBalance: number,\r\n        operation: string,\r\n        price: number,\r\n        volume: number\r\n    ): Promise<ItemTradeResult> {\r\n        return await this._sendOrder(\r\n            item, id, expectedBalance, operation, price, volume, \"bid\"\r\n        );\r\n    }\r\n\r\n    async sendSellOrder(\r\n        item: ItemEnumType,\r\n        id: number,\r\n        expectedBalance: number,\r\n        operation: string,\r\n        price: number,\r\n        volume: number\r\n    ): Promise<ItemTradeResult> {\r\n        return await this._sendOrder(\r\n            item, id, expectedBalance, operation, price, volume, \"ask\"\r\n        );\r\n    }\r\n\r\n    async _sendOrder(\r\n        item: ItemEnumType,\r\n        id: number,\r\n        expectedBalance: number,\r\n        operation: string,\r\n        price: number,\r\n        volume: number,\r\n        direction: string\r\n    ): Promise<ItemTradeResult> {\r\n        const trade = new ItemTrade(\r\n            direction,\r\n            expectedBalance,\r\n            operation,\r\n            price,\r\n            volume\r\n        );\r\n        const json = convertFloatsToStrings(trade);\r\n        const response: ResponseObject = await super.post( { endpoint: apiRoutes.orders, id, item, data: json });\r\n\r\n        if (response.status == 200) {\r\n            return ItemTradeResult.validate(response);\r\n        } else {\r\n            throw new BuySellOrderFailedException(\r\n                `Failed to send ${direction} order: ${response.statusText}`\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default TownsAPI;","import { z } from 'zod';\r\nimport { BuildingConstructionSchema } from './BuildingConstructionSchema';\r\nimport { DeliveryCostSchema } from './DeliveryCostSchema';\r\nimport { LocationSchema } from './LocationSchema';\r\nimport { ProducerSchema } from './ProducerSchema';\r\nimport { BuildingStorageSchema } from './BuildingStorageSchema';\r\nimport { BuildingUpgradeTypeEnumSchema } from './enums/BuildingUpgradeTypeEnumSchema';\r\nimport {BuildingTypeEnumSchema} from \"./enums/BuildingTypeEnumSchema\";\r\n\r\nexport const BuildingSchema = z.object({\r\n    capacity: z.number().optional(),\r\n    construction: BuildingConstructionSchema.optional(),\r\n    delivery_cost: DeliveryCostSchema,\r\n    id: z.number(),\r\n    land: z.array(LocationSchema).optional(),\r\n    name: z.string(),\r\n    owner_id: z.number(),\r\n    producer: ProducerSchema.optional(),\r\n    provider_id: z.number().optional(),\r\n    size: z.number().optional(),\r\n    storage: BuildingStorageSchema.optional(),\r\n    sublocation: LocationSchema.optional(),\r\n    town_id: z.number(),\r\n    type: BuildingTypeEnumSchema,\r\n    upgrades: z.array(BuildingUpgradeTypeEnumSchema).optional()\r\n});\r\n\r\nexport type BuildingType = z.infer<typeof BuildingSchema>;\r\n","import { z } from 'zod';\r\nimport { ItemEnumSchema } from './enums/ItemEnumSchema';\r\n\r\nexport const BuildingConstructionSchema = z.object({\r\n    range: z.number().optional(),\r\n    size: z.number().optional(),\r\n    discount: z.number().optional(),\r\n    time: z.number(),\r\n    materials: z.record(ItemEnumSchema, z.number())\r\n});\r\n\r\nexport type BuildingConstructionType = z.infer<typeof BuildingConstructionSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const DeliveryCostSchema = z.object({\r\n    land_distance: z.number(),\r\n    ferry_fee: z.number().optional()\r\n});\r\n\r\nexport type DeliveryCostType = z.infer<typeof DeliveryCostSchema>;\r\n","import { z } from 'zod';\r\nimport { InventorySchema } from './InventorySchema';\r\nimport { OperationSchema } from './OperationSchema';\r\nimport { RecipeEnumSchema } from './enums/RecipeEnumSchema';\r\n\r\nexport const ProducerSchema = z.object({\r\n    inventory: InventorySchema,\r\n    limited: z.boolean(),\r\n    manager: z.string(),\r\n    previous_operation: OperationSchema,\r\n    provider_id: z.number().optional(),\r\n    recipe: RecipeEnumSchema,\r\n    reference: z.string(),\r\n    target: z.number().optional()\r\n});\r\n\r\nexport type ProducerType = z.infer<typeof ProducerSchema>;\r\n","import { z } from 'zod';\r\nimport { DeliveryCostSchema } from './DeliveryCostSchema';\r\nimport { RecipeEnumSchema } from './enums/RecipeEnumSchema';\r\nimport { FlowSchema } from './FlowSchema';\r\nimport {ItemEnumSchema} from \"./enums/ItemEnumSchema\";\r\n\r\nexport const OperationSchema = z.object({\r\n    target: z.number(),\r\n    production: z.number().optional(),\r\n    provision: z.number().optional(),\r\n    reference: z.string().optional(),\r\n    recipe: RecipeEnumSchema.optional(),\r\n    volume: z.number().optional(),\r\n    tax_rate: z.number().optional(),\r\n    tax: z.number().optional(),\r\n    delivery_cost: DeliveryCostSchema.optional(),\r\n    flows: z.record(ItemEnumSchema, FlowSchema).optional()\r\n});\r\n\r\nexport type OperationType = z.infer<typeof OperationSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const RecipeEnumSchema = z.enum([\r\n    \"bake bread 1\",\r\n    \"bake bread 2\",\r\n    \"bake pasties 1\",\r\n    \"bake pasties 2\",\r\n    \"bake pies 1\",\r\n    \"bind garments 1\",\r\n    \"bind garments 2\",\r\n    \"blow glassware 1\",\r\n    \"blow glassware 2\",\r\n    \"boil dye 1\",\r\n    \"boil dye 2\",\r\n    \"border patrol 1\",\r\n    \"border patrol 2\",\r\n    \"breed cattle 1a\",\r\n    \"breed cattle 1b\",\r\n    \"breed cattle 2a\",\r\n    \"breed cattle 2b\",\r\n    \"brew beer 1\",\r\n    \"brew beer 2\",\r\n    \"brew beer 3\",\r\n    \"brew beer 4\",\r\n    \"brew hop beer 1\",\r\n    \"brew hop beer 2\",\r\n    \"build cog 1\",\r\n    \"build cog 2\",\r\n    \"build handcart 1\",\r\n    \"build handcart 2\",\r\n    \"build hulk 1\",\r\n    \"build snekkja 1\",\r\n    \"build snekkja 2\",\r\n    \"build tumbrel 1\",\r\n    \"burn bricks 1\",\r\n    \"burn charcoal 1\",\r\n    \"burn charcoal 2\",\r\n    \"burn charcoal 3\",\r\n    \"burn charcoal 4\",\r\n    \"burn cookware 1\",\r\n    \"burn cookware 2\",\r\n    \"burn glass 1\",\r\n    \"burn lime 1\",\r\n    \"burn tar 1\",\r\n    \"burn tar 2\",\r\n    \"burn tiles 1\",\r\n    \"burn tiles 2\",\r\n    \"butcher cattle 1a\",\r\n    \"butcher cattle 1b\",\r\n    \"butcher cattle 2\",\r\n    \"carting 1\",\r\n    \"carting 2\",\r\n    \"churn butter 1\",\r\n    \"churn butter 2\",\r\n    \"cog operations\",\r\n    \"craft arms 1\",\r\n    \"craft belts 1\",\r\n    \"craft belts 2\",\r\n    \"craft belts 3\",\r\n    \"craft belts 4\",\r\n    \"craft cookware 1\",\r\n    \"craft furniture 1\",\r\n    \"craft furniture 2\",\r\n    \"craft furniture 3\",\r\n    \"craft furniture 4\",\r\n    \"craft ploughs 1\",\r\n    \"craft ploughs 2\",\r\n    \"craft ploughs 3\",\r\n    \"craft scythes 1\",\r\n    \"craft scythes 2\",\r\n    \"craft tools 1\",\r\n    \"craft tools 2\",\r\n    \"craft wheels 1\",\r\n    \"craft wheels 2\",\r\n    \"craft wheels 3\",\r\n    \"cut bricks 1\",\r\n    \"cut grindstones 1\",\r\n    \"delivery duty 1\",\r\n    \"delivery duty 2\",\r\n    \"dig clay 1\",\r\n    \"dig clay 2\",\r\n    \"distill spirits 1\",\r\n    \"distill spirits 2\",\r\n    \"dry fish 1\",\r\n    \"dry fish 2\",\r\n    \"dry stockfish 1\",\r\n    \"dry stockfish 2\",\r\n    \"dye cloth 1\",\r\n    \"dye cloth 2\",\r\n    \"extract stone 1\",\r\n    \"extract stone 2\",\r\n    \"extract stone 3\",\r\n    \"fishing 1\",\r\n    \"fishing 2a\",\r\n    \"fishing 2b\",\r\n    \"fishing 3\",\r\n    \"forge arms 1\",\r\n    \"forge arms 2\",\r\n    \"forge arms 2b\",\r\n    \"forge axes 1\",\r\n    \"forge axes 1b\",\r\n    \"forge axes 2\",\r\n    \"forge axes 2b\",\r\n    \"forge blades 1\",\r\n    \"forge blades 1b\",\r\n    \"forge blades 2\",\r\n    \"forge blades 2b\",\r\n    \"forge mouldboards 1\",\r\n    \"forge pickaxes 1\",\r\n    \"forge pickaxes 1b\",\r\n    \"forge pickaxes 2\",\r\n    \"forge pickaxes 2b\",\r\n    \"forge swords 1\",\r\n    \"forge swords 1b\",\r\n    \"forge swords 2\",\r\n    \"forge swords 2b\",\r\n    \"forge tools 1\",\r\n    \"forge tools 2\",\r\n    \"forge tools 3\",\r\n    \"gather firewood 1\",\r\n    \"gather firewood 2\",\r\n    \"gather resin 1\",\r\n    \"gather resin 2\",\r\n    \"grain payment\",\r\n    \"grow flax 1\",\r\n    \"grow flax 2\",\r\n    \"grow flax 3\",\r\n    \"grow flax 4a\",\r\n    \"grow flax 4b\",\r\n    \"grow grain 1\",\r\n    \"grow grain 2\",\r\n    \"grow grain 3a\",\r\n    \"grow grain 3b\",\r\n    \"grow grain 4a\",\r\n    \"grow grain 4b\",\r\n    \"grow herbs 1\",\r\n    \"grow herbs 2\",\r\n    \"hammer nails 1\",\r\n    \"handcart operations\",\r\n    \"harness ox 1\",\r\n    \"harness ox 2a\",\r\n    \"harness ox 2b\",\r\n    \"harness ox 3a\",\r\n    \"harness ox 3b\",\r\n    \"harness ox 4a\",\r\n    \"harness ox 4b\",\r\n    \"herd sheep 1\",\r\n    \"herd sheep 2\",\r\n    \"hold banquet 1a\",\r\n    \"hold banquet 1b\",\r\n    \"hold banquet 2a\",\r\n    \"hold banquet 2b\",\r\n    \"hold banquet 2c\",\r\n    \"hold banquet 3a\",\r\n    \"hold banquet 3b\",\r\n    \"hold banquet 3c\",\r\n    \"hold banquet 4a\",\r\n    \"hold banquet 4b\",\r\n    \"hold feast 1\",\r\n    \"hold feast 2\",\r\n    \"hold feast 3\",\r\n    \"hold mass 1\",\r\n    \"hold mass 2\",\r\n    \"hold mass 3\",\r\n    \"hold prayer 1\",\r\n    \"hold prayer 2\",\r\n    \"hold prayer 3\",\r\n    \"hold sermon 1\",\r\n    \"hold sermon 2a\",\r\n    \"hold sermon 2b\",\r\n    \"hold sermon 3a\",\r\n    \"hold sermon 3b\",\r\n    \"hulk operations\",\r\n    \"hunting 1\",\r\n    \"hunting 2\",\r\n    \"hunting 3\",\r\n    \"hunting 4\",\r\n    \"hunting 5\",\r\n    \"keep bees 1\",\r\n    \"knight duty 1\",\r\n    \"knight duty 2\",\r\n    \"knight duty 3\",\r\n    \"knight duty 4\",\r\n    \"knit garments 1\",\r\n    \"knit garments 2\",\r\n    \"let cottages 1\",\r\n    \"let cottages 2\",\r\n    \"logging 1\",\r\n    \"logging 2\",\r\n    \"logging 3\",\r\n    \"maintain 1\",\r\n    \"make alembics 1\",\r\n    \"make alembics 2\",\r\n    \"make bricks 1\",\r\n    \"make bricks 2\",\r\n    \"make candles 1\",\r\n    \"make candles 2\",\r\n    \"make casks 1\",\r\n    \"make casks 2\",\r\n    \"make cheese 1\",\r\n    \"make cheese 2\",\r\n    \"make cheese 3\",\r\n    \"make cheese 4\",\r\n    \"make cheese 5\",\r\n    \"make harnesses 1\",\r\n    \"make harnesses 2\",\r\n    \"make harnesses 2b\",\r\n    \"make jewellery 1\",\r\n    \"make jewellery 2\",\r\n    \"make leather armor 1\",\r\n    \"make medicine 1\",\r\n    \"make medicine 2\",\r\n    \"make nets 1\",\r\n    \"make nets 2\",\r\n    \"make nets 3\",\r\n    \"make rope 1\",\r\n    \"make windows 1\",\r\n    \"make wine 1\",\r\n    \"make wine 2\",\r\n    \"make wine 3\",\r\n    \"malting 1\",\r\n    \"malting 2\",\r\n    \"milling 1\",\r\n    \"milling 2\",\r\n    \"milling 3\",\r\n    \"mine copper 1\",\r\n    \"mine copper 2\",\r\n    \"mine copper 3\",\r\n    \"mine copper 4\",\r\n    \"mine copper 5\",\r\n    \"mine gold 1\",\r\n    \"mine gold 1b\",\r\n    \"mine gold 2\",\r\n    \"mine gold 2b\",\r\n    \"mine gold 3\",\r\n    \"mine iron 1\",\r\n    \"mine iron 2\",\r\n    \"mine iron 3\",\r\n    \"mine iron 4\",\r\n    \"mine iron 5\",\r\n    \"mine lead 1\",\r\n    \"mine lead 2\",\r\n    \"mine lead 2b\",\r\n    \"mine lead 3\",\r\n    \"mine lead 3b\",\r\n    \"mine lead 4\",\r\n    \"mine salt 1\",\r\n    \"mine salt 2\",\r\n    \"mine salt 3\",\r\n    \"mint copper coins 1\",\r\n    \"mint copper coins 2\",\r\n    \"mint copper coins 3\",\r\n    \"mint gold coins 1\",\r\n    \"mint gold coins 2\",\r\n    \"mint gold coins 3\",\r\n    \"mint leather coins 1\",\r\n    \"mint silver coins 1\",\r\n    \"mint silver coins 2\",\r\n    \"mint silver coins 3\",\r\n    \"mint steel coins 1\",\r\n    \"patrol 1\",\r\n    \"patrol 2a\",\r\n    \"patrol 2b\",\r\n    \"patrol 3a\",\r\n    \"patrol 3b\",\r\n    \"refine steel 1\",\r\n    \"refine steel 1b\",\r\n    \"refine steel 2\",\r\n    \"refine steel 2b\",\r\n    \"retting 1\",\r\n    \"retting 2\",\r\n    \"salting fish 1\",\r\n    \"salting fish 2\",\r\n    \"salting meat 1\",\r\n    \"salting meat 2\",\r\n    \"sawing 1\",\r\n    \"sawing 2\",\r\n    \"sawing 3\",\r\n    \"sawing 4\",\r\n    \"service 1\",\r\n    \"service 2\",\r\n    \"service 3\",\r\n    \"service 4\",\r\n    \"sew coats 1a\",\r\n    \"sew coats 1b\",\r\n    \"sew coats 2a\",\r\n    \"sew coats 2b\",\r\n    \"sew gambeson 1\",\r\n    \"sew garments 1\",\r\n    \"sew garments 2a\",\r\n    \"sew garments 2b\",\r\n    \"sew garments 3a\",\r\n    \"sew garments 3b\",\r\n    \"sew garments 4a\",\r\n    \"sew garments 4b\",\r\n    \"sew sails 1\",\r\n    \"sew sails 2\",\r\n    \"shear sheep 1\",\r\n    \"shear sheep 2\",\r\n    \"shear sheep 3\",\r\n    \"smelt copper 1\",\r\n    \"smelt copper 2\",\r\n    \"smelt gold 1\",\r\n    \"smelt gold 2\",\r\n    \"smelt iron 1\",\r\n    \"smelt iron 2\",\r\n    \"smelt lead 1\",\r\n    \"smelt lead 2a\",\r\n    \"smelt lead 2b\",\r\n    \"smelt lead 3 (silver)\",\r\n    \"smoking fish 1\",\r\n    \"smoking fish 2\",\r\n    \"smoking ham 1\",\r\n    \"smoking ham 2\",\r\n    \"smoking meat 1\",\r\n    \"smoking meat 2\",\r\n    \"snekkja operations\",\r\n    \"spin thread 1\",\r\n    \"spin thread 2\",\r\n    \"spin yarn 1\",\r\n    \"spin yarn 2\",\r\n    \"split timber 1\",\r\n    \"split timber 2\",\r\n    \"tan hides 1\",\r\n    \"tan hides 2\",\r\n    \"trap fish 1\",\r\n    \"trap fish 2\",\r\n    \"trap fish 3\",\r\n    \"trapping 1\",\r\n    \"trapping 2\",\r\n    \"tumbrel operations\",\r\n    \"weave cloth 1\",\r\n    \"weave cloth 2a\",\r\n    \"weave cloth 2b\",\r\n    \"weave cloth 3a\",\r\n    \"weave cloth 3b\",\r\n    \"weave cloth 4a\",\r\n    \"weave cloth 4b\",\r\n    \"yoke ox 1a\",\r\n    \"yoke ox 1b\",\r\n    \"yoke ox 2a\",\r\n    \"yoke ox 2b\",\r\n    \"yoke ox 3\",\r\n    \"yoke ox 3 (manure)\"\r\n]);\r\n\r\nexport type RecipeEnumType = z.infer<typeof RecipeEnumSchema>;\r\n","import { z } from 'zod';\r\nimport { InventorySchema } from './InventorySchema';\r\n\r\nexport const BuildingStorageSchema = z.object({\r\n    inventory: InventorySchema,\r\n    operations: z.array(z.string()),\r\n    reference: z.string()\r\n});\r\n\r\nexport type BuildingStorageType = z.infer<typeof BuildingStorageSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const BuildingUpgradeTypeEnumSchema = z.enum([\r\n    \"armsrack\",\r\n    \"beehives\",\r\n    \"bellows\",\r\n    \"button cast\",\r\n    \"cowshed\",\r\n    \"crane\",\r\n    \"crane lift\",\r\n    \"curing chamber\",\r\n    \"cutting table\",\r\n    \"fermentory\",\r\n    \"grindstone\",\r\n    \"grooved bedstone\",\r\n    \"guard booth\",\r\n    \"hopping vessels\",\r\n    \"lime kiln\",\r\n    \"liming pots\",\r\n    \"malt mill\",\r\n    \"malt sieve\",\r\n    \"manure pit\",\r\n    \"plough house\",\r\n    \"skinning table\",\r\n    \"spinning wheel\",\r\n    \"steel anvil\",\r\n    \"stone oven\",\r\n    \"stonecutter's hut\",\r\n    \"tile moulds\",\r\n    \"toolshed\",\r\n    \"transmission\",\r\n    \"treadle loom\",\r\n    \"upholstry bench\",\r\n    \"warehouse\",\r\n    \"weaponsrack\"\r\n]);\r\n\r\nexport type BuildingUpgradeTypeEnumType = z.infer<typeof BuildingUpgradeTypeEnumSchema>;\r\n","import { z } from 'zod';\r\nimport { ItemEnumSchema } from './enums/ItemEnumSchema';\r\nimport { FlowSchema } from './FlowSchema';\r\nimport { OperationSchema } from './OperationSchema';\r\n\r\nexport const BuildingOperationSchema = z.object({\r\n    total_flow: z.record(ItemEnumSchema, FlowSchema).optional(),\r\n    operations: z.array(OperationSchema).optional()\r\n});\r\n\r\nexport type BuildingOperationType = z.infer<typeof BuildingOperationSchema>;\r\n","import { BaseModel } from './baseModel';\r\nimport { BuildingSchema, BuildingType } from '../schema/BuildingSchema';\r\nimport { BuildingConstructionSchema, BuildingConstructionType } from '../schema/BuildingConstructionSchema';\r\nimport { BuildingStorageSchema, BuildingStorageType } from '../schema/BuildingStorageSchema';\r\nimport { BuildingOperationSchema, BuildingOperationType } from '../schema/BuildingOperationSchema';\r\nimport {DeliveryCost} from \"./deliveryCost\";\r\nimport {Producer} from \"./producer\";\r\nimport {BuildingUpgradeTypeEnumType} from \"../schema/enums/BuildingUpgradeTypeEnumSchema\";\r\nimport { Location } from \"./location\";\r\nimport {BuildingTypeEnumType} from \"../schema/enums/BuildingTypeEnumSchema\";\r\nimport {ItemEnumType} from \"../schema/enums/ItemEnumSchema\";\r\nimport {Inventory} from \"./inventory\";\r\nimport {Flow} from \"./flow\";\r\nimport {Operation} from \"./operation\";\r\n\r\nexport class Building extends BaseModel implements BuildingType {\r\n    static schema = BuildingSchema;\r\n\r\n    capacity: number | null;\r\n    construction: BuildingConstruction | null;\r\n    delivery_cost: DeliveryCost;\r\n    id: number;\r\n    land: Location[] | null;\r\n    name: string;\r\n    owner_id: number;\r\n    producer: Producer | null;\r\n    provider_id: number | null;\r\n    size: number | null;\r\n    storage: BuildingStorage | null;\r\n    sublocation: Location | null;\r\n    town_id: number;\r\n    type: BuildingTypeEnumType;\r\n    upgrades: BuildingUpgradeTypeEnumType[] | null;\r\n}\r\n\r\nexport class BuildingConstruction extends BaseModel implements BuildingConstructionType {\r\n    static schema = BuildingConstructionSchema;\r\n\r\n    range: number | null;\r\n    size: number | null;\r\n    discount: number | null;\r\n    time: number;\r\n    materials: Record<ItemEnumType, number>;\r\n}\r\n\r\nexport class BuildingStorage extends BaseModel implements BuildingStorageType {\r\n    static schema = BuildingStorageSchema;\r\n\r\n    inventory: Inventory;\r\n    operations: string[];\r\n    reference: string;\r\n}\r\n\r\nexport class BuildingOperation extends BaseModel implements BuildingOperationType {\r\n    static schema = BuildingOperationSchema;\r\n\r\n    total_flow: Record<ItemEnumType, Flow> | null;\r\n    operations: Operation[] | null;\r\n\r\n\r\n}","import BaseAPI from './baseAPI';\r\nimport { ResponseObject } from \"./baseAPI\";\r\nimport { apiRoutes } from \"./api-routes\";\r\nimport { Building, BuildingOperation } from \"../models/building\";\r\nimport { Manager } from \"../models/manager\";\r\nimport { ItemTypeEnumType } from \"../schema/enums/ItemTypeEnumSchema\";\r\nimport { SetManagerFailedException, convertFloatsToStrings } from \"../utils\";\r\nimport { pickBy } from 'lodash';\r\nimport * as _ from 'lodash';\r\nimport {ItemEnumType} from \"../schema/enums/ItemEnumSchema\";\r\n\r\nclass BuildingsAPI extends BaseAPI {\r\n\r\n    endpoint: string = apiRoutes.buildings;\r\n\r\n    /**\r\n     * Get data for a building.\r\n     * @param id - The ID of the building.\r\n     * @returns The data for the building.\r\n     */\r\n    async get({ id }: { endpoint?: string, id?: number, item?: string } = {}): Promise<Building> {\r\n        try {\r\n            const response = await super.get({ id });\r\n            return Building.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch building with ID ${id}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    async getOperations(id: number): Promise<BuildingOperation> {\r\n        try {\r\n            const response: ResponseObject = await super.get({ endpoint: apiRoutes.buildingOperations, id });\r\n            if(response.status == 404) {\r\n                return new BuildingOperation();\r\n            }\r\n            return BuildingOperation.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch building with ID ${id}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    async setManager(id: number, item: ItemEnumType, manager: Manager): Promise<Building> {\r\n        try {\r\n            const json = convertFloatsToStrings(pickBy(manager, _.identity));\r\n            const response: ResponseObject = await super.patch({ endpoint: apiRoutes.buildingSetManager, id, item, data: json });\r\n            if(response.status && response.status == 200) {\r\n                return Building.validate(response.data['_embedded'][`/buildings/${id}`]);\r\n            }\r\n            else {\r\n                throw new SetManagerFailedException(`Failed to set manager for ${item} on building ${id}: ${response.statusText}`);\r\n            }\r\n        } catch (error) {\r\n            throw new SetManagerFailedException(`Failed to set manager for ${item} on building ${id}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    async setProductionTargetMultiplier(id: number, target: number, autosetBuying: boolean = true, autosetSelling: boolean = true): Promise<boolean> {\r\n        const payload = { target, autoset_buying: autosetBuying, autoset_selling: autosetSelling };\r\n        const json = convertFloatsToStrings(payload);\r\n        const response: ResponseObject = await super.patch({ endpoint: apiRoutes.producer, id, data: json });\r\n        return response.status == 200;\r\n\r\n    }\r\n}\r\n\r\nexport default BuildingsAPI;","import { z } from 'zod';\r\nimport { AccountSchema } from './AccountSchema';\r\nimport { BuildingSchema } from './BuildingSchema';\r\n\r\nexport const BusinessSchema = z.object({\r\n    account: AccountSchema,\r\n    account_id: z.string(),\r\n    building_ids: z.array(z.number()),\r\n    buildings: z.array(BuildingSchema),\r\n    contract_ids: z.array(z.string()).optional().nullable(),\r\n    id: z.number(),\r\n    name: z.string(),\r\n    owner_id: z.number(),\r\n    transport_ids: z.array(z.number()).optional().nullable()\r\n});\r\n\r\nexport type BusinessType = z.infer<typeof BusinessSchema>;\r\n","import { z } from 'zod';\r\nimport { BuildingTypeEnumSchema } from './enums/BuildingTypeEnumSchema';\r\n\r\nexport const BusinessBuildingSchema = z.object({\r\n    id: z.number(),\r\n    type: BuildingTypeEnumSchema\r\n});\r\n\r\nexport type BusinessBuildingType = z.infer<typeof BusinessBuildingSchema>;\r\n","import { BaseModel } from './baseModel';\r\nimport { BusinessSchema, BusinessType } from '../schema/BusinessSchema';\r\nimport { BusinessBuildingSchema, BusinessBuildingType } from '../schema/BusinessBuildingSchema';\r\nimport {Account} from \"./account\";\r\nimport {Building} from \"./building\";\r\nimport {BuildingTypeEnumType} from \"../schema/enums/BuildingTypeEnumSchema\";\r\n\r\nexport class Business extends BaseModel implements BusinessType {\r\n    static schema = BusinessSchema;\r\n\r\n    account: Account;\r\n    account_id: string;\r\n    building_ids: number[];\r\n    buildings: Building[];\r\n    contract_ids: string[] | null;\r\n    id: number;\r\n    name: string;\r\n    owner_id: number;\r\n    transport_ids: number[] | null;\r\n\r\n}\r\n\r\nexport class BusinessBuilding extends BaseModel implements BusinessBuildingType {\r\n    static schema = BusinessBuildingSchema;\r\n\r\n    id: number;\r\n    type: BuildingTypeEnumType;\r\n\r\n}","import BaseAPI from './baseAPI';\r\nimport { apiRoutes } from \"./api-routes\";\r\nimport {Business} from \"../models/business\";\r\n\r\nclass BusinessesAPI extends BaseAPI {\r\n\r\n    endpoint: string = apiRoutes.business;\r\n\r\n    /**\r\n     Get a business by its ID.\r\n     * @param {number} id - The ID of the business.\r\n     * @returns The business with the given ID.\r\n     */\r\n    async get({ id }: { endpoint?: string, id?: number, item?: string } = {}): Promise<Business> {\r\n        try {\r\n            const response = await super.get({ id });\r\n            return Business.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch business with ID ${id}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport default BusinessesAPI;","import { z } from 'zod';\r\nimport { LocationSchema } from './LocationSchema';\r\n\r\nexport const RegionSchema = z.object({\r\n    id: z.number(), // Adjust type as necessary, e.g., z.string() or z.number()\r\n    name: z.string(),\r\n    description: z.string().optional(),\r\n    center: LocationSchema.optional(),\r\n    size: z.number().optional()\r\n});\r\n\r\nexport type RegionType = z.infer<typeof RegionSchema>;\r\n","import { BaseModel } from './baseModel';\r\nimport { RegionSchema, RegionType } from '../schema/RegionSchema';\r\nimport { Location} from \"./location\";\r\n\r\nexport class Region extends BaseModel implements RegionType {\r\n    static schema = RegionSchema;\r\n\r\n    id: number;\r\n    name: string;\r\n    description: string | null;\r\n    center: Location | null;\r\n    size: number | null;\r\n}","import BaseAPI from './baseAPI';\r\nimport { apiRoutes } from \"./api-routes\";\r\nimport { Region } from '../models/region';\r\nimport { RegionType } from '../schema/RegionSchema';\r\n\r\nclass RegionAPI extends BaseAPI {\r\n    endpoint: string = apiRoutes.regions;\r\n\r\n    /**\r\n     * Get a list of all regions in the game.\r\n     * @returns A list of all regions in the game.\r\n     */\r\n    async getAll(): Promise<RegionType[]> {\r\n        try {\r\n            const response = await super.get() as unknown[];\r\n            return response.map((regionData: unknown) => Region.validate(regionData) as RegionType);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch regions: ${(error as Error).message}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport default RegionAPI;\r\n","import axios, { AxiosInstance } from 'axios';\r\nimport BaseAPI from './baseAPI';\r\nimport Client from '../client';\r\nimport { staticUrl, rootUrl } from \"./api-routes\";\r\nimport { Building } from '../models/building'\r\nimport { LRUCache } from \"lru-cache\";\r\nimport { Item } from '../models/item';\r\nimport { Recipe } from '../models/recipe';\r\nimport { Transport } from '../models/transport';\r\n\r\nclass StaticAPI extends BaseAPI {\r\n    endpoint: string = staticUrl;\r\n    cache: LRUCache<string, object[]>;\r\n\r\n    constructor(client: Client) {\r\n        super(client);\r\n        this.cache = new LRUCache<string, object[]>({ max: 1 });\r\n    }\r\n\r\n    async getBuildings(): Promise<Building[]> {\r\n        const data = await this._get();\r\n        return data['Gm'].map(item => Building.validate(item));\r\n    }\r\n\r\n    async getItems(): Promise<Item[]> {\r\n        const data = await this._get();\r\n        return data['RB'].map(item => Item.validate(item));\r\n    }\r\n\r\n    async getRecipes(): Promise<Recipe[]> {\r\n        const data = await this._get();\r\n        return data['F_'].map(item => Recipe.validate(item));\r\n    }\r\n\r\n    async getTransport(): Promise<Transport[]> {\r\n        const data = await this._get();\r\n        return data['g$'].map(item => Transport.validate(item));\r\n    }\r\n\r\n    async _get(): Promise<object> {\r\n        if (this.cache.has('staticData')) {\r\n            return this.cache.get('staticData');\r\n        }\r\n\r\n        const response = await axios.get(rootUrl);\r\n        const pattern = /src=\"\\/static\\/js\\/(.*?)\">/;\r\n        const filename = response.data.match(pattern)[1];\r\n\r\n        const staticResponse = await axios.get(staticUrl + filename);\r\n        const jsonPattern = /JSON\\.parse\\('(.*?)'\\)/;\r\n        const jsonData = JSON.parse(staticResponse.data.match(jsonPattern)[1].replace(/\\\\/g, ''));\r\n\r\n        this.cache.set('staticData', jsonData);\r\n        return jsonData;\r\n    }\r\n}\r\n\r\nexport default StaticAPI;","import { z } from 'zod';\r\nimport { ItemEnumSchema } from './enums/ItemEnumSchema';\r\nimport { ItemTypeEnumSchema } from './enums/ItemTypeEnumSchema';\r\nimport { SkillEnumSchema } from './enums/SkillEnumSchema';\r\nimport { ItemPriceSchema } from './ItemPriceSchema';\r\n\r\nexport const ItemSchema = z.object({\r\n    name: ItemEnumSchema,\r\n    type: ItemTypeEnumSchema,\r\n    unit: z.string(),\r\n    weight: z.number().optional(),\r\n    tier: z.number(),\r\n    classes: z.array(SkillEnumSchema).optional().default([]),\r\n    price: ItemPriceSchema\r\n});\r\n\r\nexport type ItemType = z.infer<typeof ItemSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const ItemTypeEnumSchema = z.enum([\r\n    \"commodity\",\r\n    \"service\",\r\n    \"special\"\r\n]);\r\n\r\nexport type ItemTypeEnumType = z.infer<typeof ItemTypeEnumSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const ItemPriceSchema = z.object({\r\n    low: z.number().optional(),\r\n    typical: z.number(),\r\n    high: z.number().optional()\r\n});\r\n\r\nexport type ItemPriceType = z.infer<typeof ItemPriceSchema>;\r\n","import { BaseModel } from './baseModel';\r\nimport { ItemSchema, ItemType } from '../schema/ItemSchema';\r\nimport {ItemEnumType} from \"../schema/enums/ItemEnumSchema\";\r\nimport {ItemTypeEnumType} from \"../schema/enums/ItemTypeEnumSchema\";\r\nimport {SkillEnumType} from \"../schema/enums/SkillEnumSchema\";\r\nimport {ItemPriceType} from \"../schema/ItemPriceSchema\";\r\n\r\nexport class Item extends BaseModel implements ItemType {\r\n    static schema = ItemSchema;\r\n\r\n    name: ItemEnumType;\r\n    type: ItemTypeEnumType;\r\n    unit: string;\r\n    weight: number | null;\r\n    tier: number;\r\n    classes: SkillEnumType[];\r\n    price: ItemPriceType;\r\n}","import { z } from 'zod';\r\nimport { RecipeEnumSchema } from './enums/RecipeEnumSchema';\r\nimport { BuildingTypeEnumSchema } from './enums/BuildingTypeEnumSchema';\r\nimport { SkillEnumSchema } from './enums/SkillEnumSchema';\r\nimport { IngredientSchema } from './IngredientSchema';\r\n\r\nexport const RecipeSchema = z.object({\r\n    name: RecipeEnumSchema,\r\n    tier: z.number(),\r\n    building: BuildingTypeEnumSchema,\r\n    size: z.number(),\r\n    product_class: SkillEnumSchema.optional().describe('class'),\r\n    points: z.number().optional(),\r\n    inputs: z.array(IngredientSchema).optional().default([]),\r\n    outputs: z.array(IngredientSchema).optional().default([])\r\n});\r\n\r\nexport type RecipeType = z.infer<typeof RecipeSchema>;\r\n","import { z } from 'zod';\r\nimport { ItemEnumSchema } from './enums/ItemEnumSchema';\r\n\r\nexport const IngredientSchema = z.object({\r\n    product: ItemEnumSchema,\r\n    amount: z.number()\r\n});\r\n\r\nexport type IngredientType = z.infer<typeof IngredientSchema>;\r\n","import { BaseModel } from './baseModel';\r\nimport { RecipeSchema, RecipeType } from '../schema/RecipeSchema';\r\nimport { IngredientSchema, IngredientType } from '../schema/IngredientSchema';\r\nimport {RecipeEnumType} from \"../schema/enums/RecipeEnumSchema\";\r\nimport {BuildingTypeEnumType} from \"../schema/enums/BuildingTypeEnumSchema\";\r\nimport {SkillEnumType} from \"../schema/enums/SkillEnumSchema\";\r\nimport {ItemEnumType} from \"../schema/enums/ItemEnumSchema\";\r\n\r\nexport class Recipe extends BaseModel implements RecipeType {\r\n    static schema = RecipeSchema;\r\n\r\n    name: RecipeEnumType;\r\n    tier: number;\r\n    building: BuildingTypeEnumType;\r\n    size: number;\r\n    product_class: SkillEnumType | null;\r\n    points: number | null;\r\n    inputs: Ingredient[];\r\n    outputs: Ingredient[];\r\n}\r\n\r\nexport class Ingredient extends BaseModel implements IngredientType {\r\n    static schema = IngredientSchema;\r\n\r\n    product: ItemEnumType;\r\n    amount: number;\r\n}","import { z } from 'zod';\r\nimport { TransportTypeSchema } from './TransportTypeSchema';\r\nimport { LocationSchema } from './LocationSchema';\r\nimport { InventorySchema } from './InventorySchema';\r\nimport { TransportCargoSchema } from './TransportCargoSchema';\r\nimport { OperationSchema } from './OperationSchema';\r\nimport { ProducerSchema } from './ProducerSchema';\r\nimport { TradeRouteSchema } from './TradeRouteSchema';\r\nimport { TransportJourneySchema } from './TransportJourneySchema';\r\n\r\nexport const TransportSchema = z.object({\r\n    id: z.number(),\r\n    reference: z.string(),\r\n    type: TransportTypeSchema,\r\n    size: z.number(),\r\n    name: z.string(),\r\n    owner_id: z.number(),\r\n    hometown_id: z.number(),\r\n    location: LocationSchema,\r\n    domain: z.array(LocationSchema).optional(),\r\n    capacity: z.number(),\r\n    fish_quantity: z.number().optional(),\r\n    inventory: InventorySchema,\r\n    cargo: TransportCargoSchema.optional(),\r\n    previous_operations: OperationSchema.optional(),\r\n    provider_id: z.number().optional(),\r\n    producer: ProducerSchema.optional(),\r\n    route: TradeRouteSchema.optional(),\r\n    journey: TransportJourneySchema\r\n});\r\n\r\nexport type TransportType = z.infer<typeof TransportSchema>;\r\n","import { z } from 'zod';\r\nimport { TransportTypeEnumSchema } from './enums/TransportTypeEnumSchema';\r\nimport { ItemEnumSchema } from './enums/ItemEnumSchema';\r\n\r\nexport const TransportTypeSchema = z.object({\r\n    type: TransportTypeEnumSchema,\r\n    category: z.number(),\r\n    tier: z.number(),\r\n    capacity: z.number(),\r\n    speed: z.number(),\r\n    journey_duration: z.number().optional(),\r\n    effective_days: z.number().optional(),\r\n    operating_costs: z.record(ItemEnumSchema, z.number()),\r\n    catches: z.string().optional(),\r\n    fishing_range: z.number().optional()\r\n});\r\n\r\nexport type TransportTypeType = z.infer<typeof TransportTypeSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const TransportTypeEnumSchema = z.enum([\r\n    \"cog\",\r\n    \"handcart\",\r\n    \"hulk\",\r\n    \"snekkja\",\r\n    \"tumbrel\"\r\n]);\r\n\r\nexport type TransportTypeEnumType = z.infer<typeof TransportTypeEnumSchema>;\r\n","import { z } from 'zod';\r\nimport { InventorySchema } from './InventorySchema';\r\n\r\nexport const TransportCargoSchema = z.object({\r\n    reference: z.string(),\r\n    inventory: InventorySchema.optional()\r\n});\r\n\r\nexport type TransportCargoType = z.infer<typeof TransportCargoSchema>;\r\n","import { z } from 'zod';\r\nimport { AccountSchema } from './AccountSchema';\r\nimport { ItemEnumSchema } from './enums/ItemEnumSchema';\r\nimport { ManagerSchema } from './ManagerSchema';\r\nimport { FlowSchema } from './FlowSchema';\r\n\r\nexport const TradeRouteSchema = z.object({\r\n    id: z.number(),\r\n    reference: z.string(),\r\n    local_town: z.number(),\r\n    remote_town: z.number(),\r\n    capacity: z.number(),\r\n    reserved_import: z.number(),\r\n    reserved_export: z.number(),\r\n    distance: z.number(),\r\n    moves: z.number(),\r\n    provider_id: z.number(),\r\n    account_id: z.string(),\r\n    account: AccountSchema,\r\n    managers: z.record(ItemEnumSchema, ManagerSchema),\r\n    current_flows: z.record(ItemEnumSchema, FlowSchema),\r\n    previous_flows: z.record(ItemEnumSchema, FlowSchema)\r\n});\r\n\r\nexport type TradeRouteType = z.infer<typeof TradeRouteSchema>;\r\n","import { z } from 'zod';\r\nimport { TransportJourneyLegSchema } from './TransportJourneyLegSchema';\r\n\r\nexport const TransportJourneySchema = z.object({\r\n    category: z.string(),\r\n    start_town_id: z.number(),\r\n    distance: z.number(),\r\n    moves: z.number(),\r\n    legs: z.array(TransportJourneyLegSchema)\r\n});\r\n\r\nexport type TransportJourneyType = z.infer<typeof TransportJourneySchema>;\r\n","import { z } from 'zod';\r\nimport { PathSchema } from './PathSchema';\r\n\r\nexport const TransportJourneyLegSchema = z.object({\r\n    path: z.array(PathSchema)\r\n});\r\n\r\nexport type TransportJourneyLegType = z.infer<typeof TransportJourneyLegSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const PathSchema = z.object({\r\n    x: z.number(),\r\n    y: z.number(),\r\n    c: z.number()\r\n});\r\n\r\nexport type PathType = z.infer<typeof PathSchema>;\r\n","import { BaseModel } from './baseModel';\r\nimport { TransportSchema, TransportType } from '../schema/TransportSchema';\r\nimport { TradeRouteSchema, TradeRouteType } from '../schema/TradeRouteSchema';\r\nimport { TransportCargoSchema, TransportCargoType } from '../schema/TransportCargoSchema';\r\nimport { TransportJourneySchema, TransportJourneyType } from '../schema/TransportJourneySchema';\r\nimport { TransportJourneyLegSchema, TransportJourneyLegType } from '../schema/TransportJourneyLegSchema';\r\nimport {TransportTypeType} from \"../schema/TransportTypeSchema\";\r\nimport { Location } from './location';\r\nimport {Inventory} from \"./inventory\";\r\nimport {Operation} from \"./operation\";\r\nimport {Producer} from \"./producer\";\r\nimport {Account} from \"./account\";\r\nimport {ItemEnumType} from \"../schema/enums/ItemEnumSchema\";\r\nimport {Manager} from \"./manager\";\r\nimport {Flow} from \"./flow\";\r\nimport {Path} from \"./path\";\r\n\r\nexport class Transport extends BaseModel implements TransportType {\r\n    static schema = TransportSchema;\r\n\r\n    id: number;\r\n    reference: string;\r\n    type: TransportTypeType;\r\n    size: number;\r\n    name: string;\r\n    owner_id: number;\r\n    hometown_id: number;\r\n    location: Location;\r\n    domain: Location[] | null;\r\n    capacity: number;\r\n    fish_quantity: number | null;\r\n    inventory: Inventory;\r\n    cargo: TransportCargo | null;\r\n    previous_operations: Operation | null;\r\n    provider_id: number | null;\r\n    producer: Producer | null;\r\n    route: TradeRoute | null;\r\n    journey: TransportJourney;\r\n}\r\n\r\nexport class TradeRoute extends BaseModel implements TradeRouteType {\r\n    static schema = TradeRouteSchema;\r\n\r\n    id: number;\r\n    reference: string;\r\n    local_town: number;\r\n    remote_town: number;\r\n    capacity: number;\r\n    reserved_import: number;\r\n    reserved_export: number;\r\n    distance: number;\r\n    moves: number;\r\n    provider_id: number;\r\n    account_id: string;\r\n    account: Account;\r\n    managers: Record<ItemEnumType, Manager>;\r\n    current_flows: Record<ItemEnumType, Flow>;\r\n    previous_flows: Record<ItemEnumType, Flow>;\r\n}\r\n\r\nexport class TransportCargo extends BaseModel implements TransportCargoType {\r\n    static schema = TransportCargoSchema;\r\n\r\n    reference: string;\r\n    inventory: Inventory | null;\r\n}\r\n\r\nexport class TransportJourney extends BaseModel implements TransportJourneyType {\r\n    static schema = TransportJourneySchema;\r\n\r\n    category: string;\r\n    start_town_id: number;\r\n    distance: number;\r\n    moves: number;\r\n    legs: TransportJourneyLeg[];\r\n}\r\n\r\nexport class TransportJourneyLeg extends BaseModel implements TransportJourneyLegType {\r\n    static schema = TransportJourneyLegSchema;\r\n\r\n    path: Path[];\r\n}","import BaseAPI from './baseAPI';\r\nimport { ResponseObject } from \"./baseAPI\";\r\nimport { apiRoutes } from \"./api-routes\";\r\nimport {Transport, TradeRoute} from '../models/transport';\r\nimport { Manager } from \"../models/manager\";\r\nimport { SetManagerFailedException, convertFloatsToStrings } from \"../utils\";\r\nimport { pickBy } from 'lodash';\r\nimport * as _ from 'lodash';\r\nimport {ItemEnumType} from \"../schema/enums/ItemEnumSchema\";\r\n\r\nclass TransportsAPI extends BaseAPI {\r\n\r\n    endpoint: string = apiRoutes.transports;\r\n\r\n    /**\r\n     * Get data for a town.\r\n     * @param id - The ID of the transport.\r\n     * @returns The data for the transport.\r\n     */\r\n    async get({ id }: { endpoint?: string, id?: number, item?: string } = {}): Promise<Transport> {\r\n        try {\r\n            const response = await super.get({ id });\r\n            return Transport.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch town data for ID ${id}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the manager for the item.\r\n     * @param id - The ID of the transport.\r\n     * @param item - The item to set the manager for.\r\n     * @param manager - The manager to set.\r\n     * @returns The transport route with the manager set.\r\n     */\r\n    async setManager(id: number, item: ItemEnumType, manager: Manager): Promise<TradeRoute> {\r\n        const json = convertFloatsToStrings(pickBy(manager, _.identity));\r\n        const response: ResponseObject = await super.patch({ endpoint: apiRoutes.transportManager, id, item, data: json });\r\n        if (response.status == 200) {\r\n            return TradeRoute.validate(response);\r\n        } else {\r\n            throw new SetManagerFailedException(\r\n                `Failed to set manager for ${item} on transport ${id}: ${response.statusText}`\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default TransportsAPI;","import Client from '../client'\r\nimport { ItemEnumType } from \"../schema/enums/ItemEnumSchema\";\r\nimport { Commoners } from \"../models/commoners\";\r\nimport { Market, MarketItem, MarketItemDetails } from \"../models/market\";\r\nimport { Structure } from \"../models/structure\";\r\nimport { TownData, TownDemand } from \"../models/town\";\r\nimport { ItemTradeResult } from \"../models/itemTrade\";\r\n\r\nexport class Town {\r\n    _client: Client;\r\n    _market: Market;\r\n    data: TownData;\r\n\r\n    constructor(client: Client, public id: number, data: TownData = null) {\r\n        this._client = client;\r\n        this.data = data;\r\n    }\r\n\r\n    async load(): Promise<void> {\r\n        this.data = await this._client.townsApi.getTown(this.id);\r\n        this._market = await this._client.townsApi.getMarketData(this.id);\r\n    }\r\n\r\n    get commoners(): Commoners {\r\n        return this.data!.commoners;\r\n    }\r\n\r\n    get demands(): TownDemand[] {\r\n        return this.data!.commoners.demands;\r\n    }\r\n\r\n    get market(): Record<ItemEnumType, MarketItem> {\r\n        return this._market.markets;\r\n    }\r\n\r\n    get name(): string {\r\n        return this.data!.name;\r\n    }\r\n\r\n    get structures(): {\r\n        [key: string]: Structure;\r\n    } {\r\n        const structures: {\r\n            [key: string]: Structure;\r\n        } = {};\r\n        for (const domain in this.data!.domain) {\r\n            if (this.data!.domain[domain].structure !== null) {\r\n                structures[domain] = this.data!.domain[domain].structure;\r\n            }\r\n        }\r\n        return structures;\r\n    }\r\n\r\n    get totalSatisfaction(): number {\r\n        const demands = this.data!.commoners.sustenance.flatMap((category) => category.products);\r\n        const desireTotal = demands.reduce((acc, demand) => acc + demand.desire, 0);\r\n        const resultTotal = demands.reduce((acc, demand) => acc + demand.result, 0);\r\n        return Math.ceil((resultTotal / desireTotal) * 100);\r\n    }\r\n\r\n    get totalStructures(): number {\r\n        return Object.values(this.data!.domain).filter((domain) => domain.structure !== null).length;\r\n    }\r\n\r\n    get totalTaxes(): number {\r\n        return Object.values(this.data!.government.taxes_collected).reduce((acc, value) => acc + value, 0);\r\n    }\r\n\r\n    async buy(item: ItemEnumType, expectedBalance: number, operation: string, volume: number, price: number): Promise<ItemTradeResult> {\r\n        return await this._client.townsApi.sendBuyOrder(item, this.id, expectedBalance, operation, price, volume);\r\n    }\r\n\r\n    async fetchMarketItem(item: ItemEnumType): Promise<MarketItemDetails> {\r\n        return await this._client.townsApi.getMarketItem(this.id, item);\r\n    }\r\n\r\n    item(item: ItemEnumType): MarketItem | null {\r\n        return this._market.markets[item];\r\n    }\r\n\r\n    async sell(item: ItemEnumType, expectedBalance: number, operation: string, volume: number, price: number): Promise<ItemTradeResult> {\r\n        return await this._client.townsApi.sendSellOrder(item, this.id, expectedBalance, operation, price, volume);\r\n    }\r\n}","// Import necessary types and classes\r\nimport { BuildingOperation as BuildingOperationModel } from \"../models/building\";\r\nimport Client from \"../client\";\r\nimport {Player} from \"./player\";\r\nimport {Building} from \"./building\";\r\nimport {Flow} from \"../models/flow\";\r\nimport {ItemEnumType} from \"../schema/enums/ItemEnumSchema\";\r\nimport {BuildingTypeEnumType} from \"../schema/enums/BuildingTypeEnumSchema\";\r\nimport { Operation as OperationModel } from \"../models/operation\";\r\nimport {Ingredient} from \"../models/recipe\";\r\nimport {Recipe} from \"./recipe\";\r\n\r\n// Define the BuildingOperation class\r\nexport class BuildingOperation {\r\n    data: BuildingOperationModel;\r\n    operations: OperationsList;\r\n    _client: Client\r\n    player: Player;\r\n    buildingId: number;\r\n\r\n    constructor(client: Client, player: Player, buildingId: number) {\r\n        this._client = client;\r\n        this.player = player;\r\n        this.buildingId = buildingId;\r\n    }\r\n\r\n    async load(): Promise<void> {\r\n        this.data = await this._client.buildingsApi.getOperations(this.buildingId);\r\n        if (this.data && this.data.operations) {\r\n            this.operations = new OperationsList(\r\n                ...(await Promise.all(\r\n                    this.data.operations.map((operation) => {\r\n                        return this._client.getOperation(this.player, this, operation);\r\n                    })\r\n                ))\r\n            );\r\n        } else {\r\n            this.operations = new OperationsList();\r\n        }\r\n    }\r\n\r\n    get building(): Building | undefined {\r\n        return this.player.buildings.byId(this.buildingId);\r\n    }\r\n\r\n    get totalFlow(): Record<ItemEnumType, Flow> | null {\r\n        return this.data.total_flow;\r\n    }\r\n}\r\n\r\n// Define the BuildingOperationList class\r\nexport class BuildingOperationList extends Array<BuildingOperation> {\r\n    byBuildingId(buildingId: number): BuildingOperation {\r\n        return this.find((o) => o.buildingId === buildingId);\r\n    }\r\n\r\n    byItemInput(item: ItemEnumType): OperationsList {\r\n        return new OperationsList(\r\n            ...this.flatMap((buildingOperation) =>\r\n                buildingOperation.operations.filter((operation) =>\r\n                    operation.recipe && item in operation.recipe.inputs\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    byItemOutput(item: ItemEnumType): OperationsList {\r\n        return new OperationsList(\r\n            ...this.flatMap((buildingOperation) =>\r\n                buildingOperation.operations.filter((operation) =>\r\n                    operation.recipe && item in operation.recipe.outputs\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\n// Define the BuildingOperationsDict class\r\nexport class BuildingOperationsDict extends Map<number, BuildingOperation> {\r\n    byBuildingType(buildingType: BuildingTypeEnumType): OperationsList {\r\n        return new OperationsList(\r\n            ...Array.from(this.values()).flatMap((buildingOperation) =>\r\n                buildingOperation.operations.filter((operation) =>\r\n                    operation.building && operation.building.type === buildingType\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    byItemInput(item: ItemEnumType): OperationsList {\r\n        return new OperationsList(\r\n            ...Array.from(this.values()).flatMap((buildingOperation) =>\r\n                buildingOperation.operations.filter((operation) =>\r\n                    operation.recipe && item in operation.recipe.inputs\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    byItemOutput(item: ItemEnumType): OperationsList {\r\n        return new OperationsList(\r\n            ...Array.from(this.values()).flatMap((buildingOperation) =>\r\n                buildingOperation.operations.filter((operation) =>\r\n                    operation.recipe && item in operation.recipe.outputs\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\n// Define the Operation class\r\nexport class Operation {\r\n    data: OperationModel;\r\n    recipe: Recipe | null;\r\n    _client: Client;\r\n    player: Player;\r\n    buildingOperation: BuildingOperation;\r\n\r\n    constructor(\r\n        client: Client,\r\n        player: Player,\r\n        buildingOperation: BuildingOperation,\r\n        data: OperationModel\r\n    ) {\r\n        this._client = client;\r\n        this.player = player;\r\n        this.buildingOperation = buildingOperation;\r\n        this.data = data;\r\n    }\r\n\r\n    async load(): Promise<void> {\r\n        const recipes = await this._client.staticApi.getRecipes();\r\n        for (const recipe of recipes) {\r\n            if (recipe.name === this.data.recipe) {\r\n                this.recipe = await this._client.getRecipe({ recipe });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get building(): Building | undefined {\r\n        return this.player.buildings.byId(this.buildingId);\r\n    }\r\n\r\n    get buildingId(): number {\r\n        return parseInt(this.data.reference.split('/')[1]);\r\n    }\r\n\r\n    get inputs(): Map<ItemEnumType, number> {\r\n        if (!this.recipe) {\r\n            return new Map();\r\n        }\r\n        const inputs = new Map();\r\n        for (const ingredient of Object.values(this.recipe.inputs) as Ingredient[]) {\r\n            inputs.set(ingredient.product, ingredient.amount * this.data.target);\r\n        }\r\n        return inputs;\r\n    }\r\n\r\n    get outputs(): Map<ItemEnumType, number> {\r\n        if (!this.recipe) {\r\n            return new Map();\r\n        }\r\n        const outputs = new Map();\r\n        for (const ingredient of Object.values(this.recipe.outputs) as Ingredient[]) {\r\n            outputs.set(ingredient.product, ingredient.amount * this.data.target);\r\n        }\r\n        return outputs;\r\n    }\r\n}\r\n\r\n// Define the OperationsList class\r\nexport class OperationsList extends Array<Operation> {\r\n    get inputs(): Map<ItemEnumType, number> {\r\n        const inputs = new Map();\r\n        this.forEach((operation) => {\r\n            operation.inputs.forEach((amount, item) => {\r\n                inputs.set(item, (inputs.get(item) || 0) + amount);\r\n            });\r\n        });\r\n        return inputs;\r\n    }\r\n\r\n    get outputs(): Map<ItemEnumType, number> {\r\n        const outputs = new Map();\r\n        this.forEach((operation) => {\r\n            operation.outputs.forEach((amount, item) => {\r\n                outputs.set(item, (outputs.get(item) || 0) + amount);\r\n            });\r\n        });\r\n        return outputs;\r\n    }\r\n\r\n    byBuildingId(buildingId: number): OperationsList {\r\n        return new OperationsList(\r\n            ...this.filter((operation) => operation.buildingId === buildingId)\r\n        );\r\n    }\r\n}","import Client from \"../client\";\r\nimport {Ingredient, Recipe as RecipeModel} from \"../models/recipe\";\r\nimport {ItemEnumType} from \"../schema/enums/ItemEnumSchema\";\r\nimport {ItemEnum} from \"../models/enums/itemEnum\";\r\nimport {AccountAsset} from \"../models/account\";\r\nimport {Manager} from \"../models/manager\";\r\nimport {RecipeEnumType} from \"../schema/enums/RecipeEnumSchema\";\r\n\r\nexport class Recipe {\r\n    name: string;\r\n    data: RecipeModel;\r\n    _client: Client;\r\n\r\n    constructor(options: {\r\n        client: Client;\r\n        recipe?: RecipeModel;\r\n        recipeName?: RecipeEnumType;\r\n    }) {\r\n        this._client = options.client;\r\n        if (options.recipe) {\r\n            this.data = options.recipe;\r\n        }\r\n        if (options.recipeName) {\r\n            this.name = options.recipeName;\r\n        }\r\n    }\r\n\r\n    async load(): Promise<void> {\r\n        if(!this.data && this.name) {\r\n            const recipes = await this._client.staticApi.getRecipes();\r\n            for (const recipe of recipes) {\r\n                if (recipe.name === this.name) {\r\n                    this.data = recipe;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get inputs(): Map<ItemEnumType, Ingredient> {\r\n        const inputsMap = new Map<ItemEnumType, Ingredient>();\r\n        for (const ingredient of this.data.inputs) {\r\n            inputsMap.set(ingredient.product, ingredient);\r\n        }\r\n        return inputsMap;\r\n    }\r\n\r\n    get outputs(): Map<ItemEnumType, Ingredient> {\r\n        const outputsMap = new Map<ItemEnumType, Ingredient>();\r\n        for (const ingredient of this.data.outputs) {\r\n            outputsMap.set(ingredient.product, ingredient);\r\n        }\r\n        return outputsMap;\r\n    }\r\n\r\n    get labour(): number {\r\n        for (const inputIngredient of this.data.inputs) {\r\n            if (inputIngredient.product === ItemEnum.Labour) {\r\n                return inputIngredient.amount;\r\n            }\r\n        }\r\n        return 0.0;\r\n    }\r\n\r\n    calculateTargetLabor(\r\n        target: number,\r\n        inventoryAssets: { [key: string]: AccountAsset } = {},\r\n        inventoryManagers: { [key: string]: Manager } = {}\r\n    ): number {\r\n        for (const inputIngredient of this.data.inputs) {\r\n            if (inputIngredient.product === ItemEnum.Labour) {\r\n                continue;\r\n            }\r\n            const requiredAmount = inputIngredient.amount * target;\r\n            let availableAmount = 0;\r\n\r\n            const asset = inventoryAssets[inputIngredient.product];\r\n            if (asset) {\r\n                const manager = inventoryManagers[inputIngredient.product];\r\n                const buyVolume = manager ? manager.buyVolume : 0;\r\n                const capacity = asset.capacity || asset.balance + buyVolume;\r\n                availableAmount = Math.min(asset.balance - asset.reserved + buyVolume, capacity);\r\n            }\r\n\r\n            if (requiredAmount > availableAmount) {\r\n                target = Math.min(target, availableAmount / inputIngredient.amount);\r\n            }\r\n        }\r\n\r\n        return this.labour * target;\r\n    }\r\n}","import { Building as BuildingModel } from '../models/building';\r\nimport Client from \"../client\";\r\nimport { Player } from './player';\r\nimport {ItemEnumType} from \"../schema/enums/ItemEnumSchema\";\r\nimport {Manager} from \"../models/manager\";\r\nimport {BuildingTypeEnumType} from \"../schema/enums/BuildingTypeEnumSchema\";\r\nimport {Recipe} from \"./recipe\";\r\nimport {AccountAsset} from \"../models/account\";\r\n\r\nexport class Building {\r\n    _client: Client;\r\n    _id: number;\r\n    id: number;\r\n    player: Player;\r\n    data: BuildingModel;\r\n\r\n    constructor(client: Client, player: Player, id: number) {\r\n        this._client = client;\r\n        this.player = player;\r\n        this._id = id;\r\n        this.id = this._id;\r\n    }\r\n\r\n    async load() {\r\n        this.data = await this._client.buildingsApi.get({ id: this._id });\r\n    }\r\n\r\n    get buildingOperation() {\r\n        return this.player.operations.get(this._id) || null;\r\n    }\r\n\r\n    get flows() {\r\n        if (this.buildingOperation && this.buildingOperation.totalFlow) {\r\n            return this.buildingOperation.data.total_flow;\r\n        } else if (this.operation) {\r\n            return this.operation.data.flows;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    get inventory() {\r\n        return this.data && this.data.storage ? this.data.storage.inventory : null;\r\n    }\r\n\r\n    get items() {\r\n        return this.data && this.data.storage ? this.data.storage.inventory.account.assets : null;\r\n    }\r\n\r\n    get operation() {\r\n        return this.operations && this.operations.length === 1 ? this.operations[0] : null;\r\n    }\r\n\r\n    get operations() {\r\n        return this.id in this.player.operations ? this.player.operations[this.id].operations : null;\r\n    }\r\n\r\n    get managers() {\r\n        return this.data && this.data.storage ? this.data.storage.inventory.managers : {};\r\n    }\r\n\r\n    get previous_flows() {\r\n        return this.data && this.data.storage ? this.data.storage.inventory.previous_flows : null;\r\n    }\r\n\r\n    get production() {\r\n        return this.data ? this.data.producer : null;\r\n    }\r\n\r\n    get productionFlows() {\r\n        return this.data && this.data.producer ? this.data.producer.inventory.previous_flows : null;\r\n    }\r\n\r\n    get size() {\r\n        return this.data ? this.data.size : null;\r\n    }\r\n\r\n    get targetProduction() {\r\n        return this.production && this.production.target ? this.production.target : 0.0;\r\n    }\r\n\r\n    get type() {\r\n        return this.data ? this.data.type : null;\r\n    }\r\n\r\n    get underConstruction() {\r\n        return this.data ? this.data.construction !== null : false;\r\n    }\r\n\r\n    get upgrades() {\r\n        return this.data ? this.data.upgrades : null;\r\n    }\r\n\r\n    async flow(item: ItemEnumType) {\r\n        return this.data && this.data.storage ? this.data.storage.inventory.previous_flows[item] : null;\r\n    }\r\n\r\n    async item(item: ItemEnumType) {\r\n        return this.data && this.data.storage ? this.data.storage.inventory.account.assets[item] : null;\r\n    }\r\n\r\n    async manager(item: ItemEnumType) {\r\n        return this.data && this.data.storage ? this.data.storage.inventory.managers[item] : null;\r\n    }\r\n\r\n    async patchManager(item: ItemEnumType, managerData: { [key: string]: any }) {\r\n        if (!this.data || !this.data.storage || !this.data.storage.inventory.managers[item]) {\r\n            throw new Error(`Item ${item} does not have a manager.`);\r\n        }\r\n\r\n        const manager = this.data.storage.inventory.managers[item];\r\n        for (const key in managerData) {\r\n            manager[key] = managerData[key];\r\n        }\r\n\r\n        const updatedObject = await this._client.buildingsApi.setManager(this.id, item, manager);\r\n        Object.assign(this, updatedObject);\r\n    }\r\n\r\n    async setManager(item: ItemEnumType, manager: Manager) {\r\n        const updatedObject = await this._client.buildingsApi.setManager(this.id, item, manager);\r\n        Object.assign(this, updatedObject);\r\n    }\r\n\r\n    async setTargetProduction(target: number, autoset_buying: boolean = true, autoset_selling: boolean = true) {\r\n        const updatedObject = await this._client.buildingsApi.setProductionTargetMultiplier(this.id, target, autoset_buying, autoset_selling);\r\n        Object.assign(this, updatedObject);\r\n    }\r\n\r\n    async calculateCurrentLaborNeed(): Promise<number> {\r\n        /* Calculates the current labor need based on the building's production recipe.\r\n        Returns:\r\n          number: The labor required for the target multiplier.\r\n        */\r\n        if (this.production) {\r\n            const recipe = new Recipe({ client: this._client, recipeName: this.production.recipe });\r\n            await recipe.load();\r\n            if (recipe) {\r\n                let inventoryAssets: Map<ItemEnumType, AccountAsset>;\r\n                if (this.items) {\r\n                    inventoryAssets = this.items;\r\n                } else if (this.data && this.data.producer) {\r\n                    inventoryAssets = this.data.producer.inventory.account.assets;\r\n                }\r\n\r\n                let inventoryManagers: Map<ItemEnumType, Manager>;\r\n                if (this.data && this.data.storage) {\r\n                    inventoryManagers = this.data.storage.inventory.managers;\r\n                } else if (this.data && this.data.producer) {\r\n                    inventoryManagers = this.data.producer.inventory.managers;\r\n                }\r\n\r\n                return recipe.calculateTargetLabor(\r\n                    this.targetProduction,\r\n                    Object.fromEntries(inventoryAssets),\r\n                    Object.fromEntries(inventoryManagers)\r\n                );\r\n            }\r\n        }\r\n\r\n        return 0.0;\r\n    }\r\n\r\n}\r\n\r\nexport class BuildingsList extends Array<Building> {\r\n    byId(id: number) {\r\n        return this.find((building) => building.id === id);\r\n    }\r\n\r\n    byType(type: BuildingTypeEnumType) {\r\n        return new BuildingsList(...this.filter((building) => building.data.type === type));\r\n    }\r\n}","import { AccountAsset } from \"../models/account\";\r\nimport { Flow } from \"../models/flow\";\r\nimport { ItemEnumType } from \"../schema/enums/ItemEnumSchema\";\r\nimport { Town } from './town';\r\nimport { Transport } from './transport';\r\nimport { Manager } from \"../models/manager\";\r\n\r\nexport class Export {\r\n    asset: AccountAsset;\r\n    flow: Flow;\r\n    item: ItemEnumType;\r\n    manager: Manager;\r\n    town: Town;\r\n    transport: Transport;\r\n\r\n    constructor(asset: AccountAsset, flow: Flow, item: ItemEnumType, manager: Manager, town: Town, transport: Transport) {\r\n        this.asset = asset;\r\n        this.flow = flow;\r\n        this.item = item;\r\n        this.manager = manager;\r\n        this.town = town;\r\n        this.transport = transport;\r\n    }\r\n\r\n    get market_data() {\r\n        return this.town.market[this.item];\r\n    }\r\n\r\n    get flowed() {\r\n        return this.flow.export || 0;\r\n    }\r\n\r\n    get value() {\r\n        return this.manager.maxSellPrice;\r\n    }\r\n\r\n    get valueFlowed() {\r\n        if (!this.flowed) {\r\n            return 0.0;\r\n        }\r\n\r\n        return this.asset.sale * this.asset.sale_price;\r\n    }\r\n\r\n    get volume() {\r\n        return this.manager.sellVolume;\r\n    }\r\n\r\n    get volumeFlowed() {\r\n        return this.flow.export || 0;\r\n    }\r\n\r\n    async fetchMarketDetails() {\r\n        return await this.town.fetchMarketItem(this.item);\r\n    }\r\n\r\n    async sell(volume: number, price: number) {\r\n        await this.transport.sell(this.item, volume, price);\r\n    }\r\n\r\n    async patchManager(buyPrice?: number, buyVolume?: number, sellPrice?: number, sellVolume?: number) {\r\n        await this.transport.patchManager(this.item, buyPrice, buyVolume, sellPrice, sellVolume);\r\n    }\r\n}\r\n\r\nexport class Exports extends Object {\r\n    private data: { [key: string]: Export };\r\n\r\n    constructor(data: { [key: string]: Export }) {\r\n        super();\r\n        this.data = data;\r\n    }\r\n\r\n    get(key: ItemEnumType): Export | undefined {\r\n        return this.data[key];\r\n    }\r\n\r\n    set(key: ItemEnumType, value: Export) {\r\n        this.data[key] = value;\r\n    }\r\n\r\n    get flowed() {\r\n        return new Exports(\r\n            Object.keys(this.data).filter((item) => this.data[item].flowed)\r\n                .reduce((acc, item) => ({ ...acc, [item]: this.data[item] }), {})\r\n        );\r\n    }\r\n    get value() {\r\n        return Object.values(this.data).reduce((acc, exp) => acc + exp.value, 0);\r\n    }\r\n    get valueFlowed() {\r\n        return Object.values(this.data).reduce(\r\n            (acc, exp) => acc + exp.valueFlowed,\r\n            0\r\n        );\r\n    }\r\n\r\n    get volume() {\r\n        return Object.values(this.data).reduce((acc, exp) => acc + exp.volume, 0);\r\n    }\r\n    get volumeFlowed() {\r\n        return Object.values(this.data).reduce(\r\n            (acc, exp) => acc + exp.volumeFlowed,\r\n            0\r\n        );\r\n    }\r\n}\r\n\r\nexport class ExportsList extends Array<Export> {\r\n    private data: Export[];\r\n\r\n    constructor(...items: Export[]) {\r\n        super(...items);\r\n    }\r\n    get flowed() {\r\n        return new ExportsList(...this.data.filter((exp) => exp.flowed));\r\n    }\r\n    get value() {\r\n        return this.data.reduce((acc, exp) => acc + exp.value, 0);\r\n    }\r\n    get valueFlowed() {\r\n        return this.data.reduce((acc, exp) => acc + exp.valueFlowed, 0);\r\n    }\r\n    get volume() {\r\n        return this.data.reduce((acc, exp) => acc + exp.volume, 0);\r\n    }\r\n    get volumeFlowed() {\r\n        return this.data.reduce((acc, exp) => acc + exp.volumeFlowed, 0);\r\n    }\r\n\r\n    byTownId(id: number) {\r\n        return new ExportsList(...this.data.filter((exp) => +exp.town.data.id === id));\r\n    }\r\n\r\n    byTownName(name: string) {\r\n        return new ExportsList(...this.data.filter((exp) => exp.town.data.name === name));\r\n    }\r\n\r\n}\r\n\r\nexport class ExportsSummed extends Object {\r\n    private data: { [key: string]: ExportsList };\r\n\r\n    constructor(data: { [key: string]: ExportsList } = {}) {\r\n        super();\r\n        this.data = data;\r\n    }\r\n\r\n    get(key: string): ExportsList | undefined {\r\n        return this.data[key];\r\n    }\r\n\r\n    set(key: string, value: ExportsList) {\r\n        this.data[key] = value;\r\n    }\r\n    get flowed() {\r\n        return new ExportsSummed(\r\n            Object.keys(this.data).filter((item) =>\r\n                this.data[item].some((exp) => exp.flowed)\r\n            ).reduce((acc, item) => ({ ...acc, [item]: this.data[item] }), {})\r\n        );\r\n    }\r\n    get value() {\r\n        return Object.values(this.data).reduce(\r\n            (acc, exps) => acc + exps.reduce((acc, exp) => acc + exp.value, 0),\r\n            0\r\n        );\r\n    }\r\n    get valueFlowed() {\r\n        return Object.values(this.data).reduce(\r\n            (acc, exps) =>\r\n                acc + exps.reduce((acc, exp) => acc + exp.valueFlowed, 0),\r\n            0\r\n        );\r\n    }\r\n    get volume() {\r\n        return Object.values(this.data).reduce(\r\n            (acc, exps) => acc + exps.reduce((acc, exp) => acc + exp.volume, 0),\r\n            0\r\n        );\r\n    }\r\n    get volumeFlowed(): number {\r\n        return Object.values(this.data).reduce((acc, exps) => {\r\n            return acc + exps.reduce((acc, exp) => acc + exp.volumeFlowed, 0);\r\n        }, 0);\r\n    }\r\n\r\n    byTownId(id: number): ExportsSummed {\r\n        const data = Object.entries(this.data).reduce((acc, [item, exps]) => {\r\n            if (+exps[0].town.data.id === id) {\r\n                acc[item] = exps;\r\n            }\r\n            return acc;\r\n        }, {});\r\n        return new ExportsSummed(data);\r\n    }\r\n\r\n    byTownName(name: string): ExportsSummed {\r\n        const data = Object.entries(this.data).reduce((acc, [item, exps]) => {\r\n            if (exps[0].town.data.name === name) {\r\n                acc[item] = exps;\r\n            }\r\n            return acc;\r\n        }, {});\r\n        return new ExportsSummed(data);\r\n    }\r\n}","// imports.ts\r\nimport { Town } from './town';\r\nimport { Transport } from './transport';\r\nimport {AccountAsset} from \"../models/account\";\r\nimport {Flow} from \"../models/flow\";\r\nimport {ItemEnumType} from \"../schema/enums/ItemEnumSchema\";\r\nimport {Manager} from \"../models/manager\";\r\n\r\nexport class Import {\r\n    asset: AccountAsset\r\n    flow: Flow\r\n    item: ItemEnumType\r\n    manager: Manager\r\n    town: Town;\r\n    transport: Transport;\r\n\r\n    constructor(asset: AccountAsset, flow: Flow, item: ItemEnumType, manager: Manager, town: Town, transport: Transport) {\r\n        this.asset = asset;\r\n        this.flow = flow;\r\n        this.item = item;\r\n        this.manager = manager;\r\n        this.town = town;\r\n        this.transport = transport;\r\n    }\r\n\r\n    get cost() {\r\n        return this.manager.maxBuyPrice;\r\n    }\r\n\r\n    get cost_flowed() {\r\n        if (!this.flowed) {\r\n            return 0.0;\r\n        }\r\n\r\n        return this.asset.purchase * this.asset.purchase_price;\r\n    }\r\n\r\n    get flowed() {\r\n        return this.flow.imported || 0;\r\n    }\r\n\r\n    get marketData() {\r\n        return this.town.market[this.item];\r\n    }\r\n\r\n    get volume() {\r\n        return this.manager.buyVolume;\r\n    }\r\n\r\n    get volumeFlowed() {\r\n        return this.flow.imported || 0;\r\n    }\r\n\r\n    async buy(volume: number, price: number) {\r\n        await this.transport.buy(this.item, volume, price);\r\n    }\r\n\r\n    async fetchMarketDetails() {\r\n        return await this.town.fetchMarketItem(this.item);\r\n    }\r\n\r\n    async patchManager(buyPrice?: number, buyVolume?: number, sellPrice?: number, sellVolume?: number) {\r\n        await this.transport.patchManager(this.item, buyPrice, buyVolume, sellPrice, sellVolume);\r\n    }\r\n}\r\n\r\nexport class Imports extends Object {\r\n    private data: { [key: string]: Import };\r\n\r\n    constructor(data: { [key: string]: Import }) {\r\n        super();\r\n        this.data = data;\r\n    }\r\n\r\n    get(key: ItemEnumType): Import | undefined {\r\n        return this.data[key];\r\n    }\r\n\r\n    set(key: ItemEnumType, value: Import) {\r\n        this.data[key] = value;\r\n    }\r\n\r\n    get cost(): number {\r\n        return Object.values(this.data).reduce((acc, imp) => acc + imp.cost, 0);\r\n    }\r\n\r\n    get costFlowed(): number {\r\n        return Object.values(this.data).reduce((acc, imp) => acc + imp.cost_flowed, 0);\r\n    }\r\n\r\n    get flowed(): Imports {\r\n        return new Imports(\r\n            Object.entries(this.data).reduce((acc, [item, imp]) => {\r\n                if (imp.flowed) {\r\n                    acc[item] = imp;\r\n                }\r\n                return acc;\r\n            }, {})\r\n        );\r\n    }\r\n\r\n    get volume(): number {\r\n        return Object.values(this.data).reduce((acc, imp) => acc + imp.volume, 0);\r\n    }\r\n\r\n    get volumeFlowed(): number {\r\n        return Object.values(this.data).reduce((acc, imp) => acc + imp.volumeFlowed, 0);\r\n    }\r\n}\r\n\r\nexport class ImportsList extends Array<Import> {\r\n\r\n    private data: Import[];\r\n    get cost(): number {\r\n        return this.data.reduce((acc, imp) => acc + imp.cost, 0);\r\n    }\r\n\r\n    get costFlowed(): number {\r\n        return this.data.reduce((acc, imp) => acc + imp.cost_flowed, 0);\r\n    }\r\n\r\n    get flowed(): ImportsList {\r\n        return new ImportsList(...this.data.filter((imp) => imp.flowed));\r\n    }\r\n\r\n    get volume(): number {\r\n        return this.data.reduce((acc, imp) => acc + imp.volume, 0);\r\n    }\r\n\r\n    get volumeFlowed(): number {\r\n        return this.data.reduce((acc, imp) => acc + imp.volumeFlowed, 0);\r\n    }\r\n\r\n    byTownId(id: number): ImportsList {\r\n        return new ImportsList(...this.data.filter((imp) => +imp.town.data.id === id));\r\n    }\r\n\r\n    byTownName(name: string): ImportsList {\r\n        return new ImportsList(...this.data.filter((imp) => imp.town.data.name === name));\r\n    }\r\n}\r\n\r\nexport class ImportsSummed extends Object {\r\n    private data: { [key: string]: ImportsList };\r\n\r\n    constructor(data: { [key: string]: ImportsList } = {}) {\r\n        super();\r\n        this.data = data;\r\n    }\r\n\r\n    get(key: string): ImportsList | undefined {\r\n        return this.data[key];\r\n    }\r\n\r\n    set(key: string, value: ImportsList) {\r\n        this.data[key] = value;\r\n    }\r\n\r\n    get cost(): number {\r\n        return Object.values(this.data).reduce((acc, imps) => acc + imps.cost, 0);\r\n    }\r\n\r\n    get costFlowed(): number {\r\n        return Object.values(this.data).reduce((acc, imps) => acc + imps.costFlowed, 0);\r\n    }\r\n\r\n    get flowed(): ImportsSummed {\r\n        return new ImportsSummed(\r\n            Object.entries(this.data).reduce((acc, [item, imps]) => {\r\n                if (imps.flowed) {\r\n                    acc[item] = imps;\r\n                }\r\n                return acc;\r\n            }, {})\r\n        );\r\n    }\r\n\r\n    get volume(): number {\r\n        return Object.values(this.data).reduce((acc, imps) => acc + imps.volume, 0);\r\n    }\r\n\r\n    get volumeFlowed(): number {\r\n        return Object.values(this.data).reduce((acc, imps) => acc + imps.volumeFlowed, 0);\r\n    }\r\n\r\n    byTownId(id: number): ImportsSummed {\r\n        return new ImportsSummed(\r\n            Object.entries(this.data).reduce((acc, [item, imps]) => {\r\n                if (+imps[0].town.data.id === id) { // Convert to number using +\r\n                    acc[item] = imps;\r\n                }\r\n                return acc;\r\n            }, {})\r\n        );\r\n    }\r\n\r\n    byTownName(name: string): ImportsSummed {\r\n        return new ImportsSummed(\r\n            Object.entries(this.data).reduce((acc, [item, imps]) => {\r\n                if (imps[0].town.data.name === name) {\r\n                    acc[item] = imps;\r\n                }\r\n                return acc;\r\n            }, {})\r\n        );\r\n    }\r\n}","import { BaseModel } from './baseModel';\r\nimport { AccountSchema, AccountType } from '../schema/AccountSchema';\r\nimport { AccountAssetSchema, AccountAssetType } from '../schema/AccountAssetSchema';\r\nimport {ItemEnumType} from \"../schema/enums/ItemEnumSchema\";\r\n\r\nexport class Account extends BaseModel implements AccountType {\r\n    static schema = AccountSchema;\r\n\r\n    assets: Map<ItemEnumType, AccountAsset>;\r\n    id: string;\r\n    master_id: string | null;\r\n    name: string | null;\r\n    owner_id: number;\r\n    sponsor_id: string | null;\r\n}\r\n\r\nexport class AccountAsset extends BaseModel implements AccountAssetType {\r\n    static schema = AccountAssetSchema;\r\n\r\n    balance: number;\r\n    capacity: number | null;\r\n    purchase: number | null;\r\n    purchase_price: number | null;\r\n    reserved: number;\r\n    reserved_capacity: number | null;\r\n    sale: number | null;\r\n    sale_price: number | null;\r\n    unit_cost: number | null;\r\n\r\n    get purchased(): boolean {\r\n        return this.purchase !== null;\r\n    }\r\n\r\n    get sold(): boolean {\r\n        return this.sale !== null;\r\n    }\r\n\r\n    get totalPurchase(): number {\r\n        return this.purchase * this.purchase_price;\r\n    }\r\n\r\n    get totalSale(): number {\r\n        return this.sale * this.sale_price;\r\n    }\r\n\r\n    get totalValue(): number {\r\n        return this.balance * this.unit_cost;\r\n    }\r\n}","import { BaseModel } from './baseModel';\r\nimport { ManagerSchema, ManagerType } from '../schema/ManagerSchema';\r\n\r\nexport class Manager extends BaseModel implements ManagerType {\r\n    static schema = ManagerSchema;\r\n\r\n    private _buyPrice: number | null;\r\n    private _buyVolume: number | null;\r\n    private _capacity: number | null;\r\n    private _maxHolding: number | null;\r\n    private _sellPrice: number | null;\r\n    private _sellVolume: number | null;\r\n\r\n    constructor(data: {\r\n        buyPrice?: number | null,\r\n        buyVolume?: number | null,\r\n        capacity?: number | null,\r\n        maxHolding?: number | null,\r\n        sellPrice?: number | null,\r\n        sellVolume?: number | null,\r\n    }) {\r\n        super();\r\n        this.buyPrice = data.buyPrice;\r\n        this.buyVolume = data.buyVolume;\r\n        this.capacity = data.capacity;\r\n        this.maxHolding = data.maxHolding;\r\n        this.sellPrice = data.sellPrice;\r\n        this.sellVolume = data.sellVolume;\r\n    }\r\n\r\n    get buyPrice(): number | null {\r\n        return this._buyPrice;\r\n    }\r\n\r\n    set buyPrice(value: number | null) {\r\n        this._buyPrice = value;\r\n    }\r\n\r\n    get buyVolume(): number | null {\r\n        return this._buyVolume;\r\n    }\r\n\r\n    set buyVolume(value: number | null) {\r\n        this._buyVolume = value;\r\n    }\r\n\r\n    get capacity(): number | null {\r\n        return this._capacity;\r\n    }\r\n\r\n    set capacity(value: number | null) {\r\n        this._capacity = value;\r\n    }\r\n\r\n    get maxHolding(): number | null {\r\n        return this._maxHolding;\r\n    }\r\n\r\n    set maxHolding(value: number | null) {\r\n        this._maxHolding = value;\r\n    }\r\n\r\n    get sellPrice(): number | null {\r\n        return this._sellPrice;\r\n    }\r\n\r\n    set sellPrice(value: number | null) {\r\n        this._sellPrice = value;\r\n    }\r\n\r\n    get sellVolume(): number | null {\r\n        return this._sellVolume;\r\n    }\r\n\r\n    set sellVolume(value: number | null) {\r\n        this._sellVolume = value;\r\n    }\r\n\r\n    get buying(): boolean {\r\n        return this.buyPrice !== null && this.buyVolume !== null;\r\n    }\r\n\r\n    get maxBuyPrice(): number {\r\n        return this.buyPrice * this.buyVolume;\r\n    }\r\n\r\n    get maxSellPrice(): number {\r\n        return this.sellPrice * this.sellVolume;\r\n    }\r\n\r\n    get selling(): boolean {\r\n        return this.sellPrice !== null && this.sellVolume !== null;\r\n    }\r\n}","import { ItemEnumType } from \"../schema/enums/ItemEnumSchema\";\r\nimport { Inventory } from '../models/inventory';\r\nimport { Town } from './town';\r\nimport {Market, MarketItem, MarketItemDetails} from '../models/market';\r\nimport { TradeRoute } from '../models/transport';\r\nimport { Exports, Export } from './exports';\r\nimport { Imports, Import } from './imports';\r\nimport Client from '../client';\r\nimport { Player } from './player';\r\nimport { Transport as TransportModel } from '../models/transport'\r\nimport { ItemTradeResult } from \"../models/itemTrade\";\r\nimport { Account, AccountAsset } from \"../models/account\";\r\nimport { Manager } from \"../models/manager\";\r\n\r\nexport class Transport {\r\n    id: number;\r\n    town: Town | null;\r\n    exports: Exports;\r\n    imports: Imports;\r\n    inventory: Inventory;\r\n    route: TradeRoute;\r\n    data: TransportModel;\r\n    _client: Client;\r\n    player: Player;\r\n\r\n    constructor(client: Client, player: Player, id: number) {\r\n        this._client = client;\r\n        this.player = player;\r\n        this.id = id;\r\n    }\r\n\r\n    get docked(): boolean {\r\n        return this.town !== null;\r\n    }\r\n\r\n    get market(): Record<ItemEnumType, MarketItem> | null {\r\n        if (this.docked) {\r\n            return this.town.market;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    async load(): Promise<void> {\r\n        this.data = await this._client.transportsApi.get({id: this.id});\r\n        if (this.data.route) {\r\n            const data = await this._client.townsApi.getTown(this.data.route.remote_town);\r\n        }\r\n        this.loadImportsExports();\r\n    }\r\n\r\n    async buy(item: ItemEnumType, volume: number, price: number): Promise<ItemTradeResult> {\r\n        if (!this.docked) {\r\n            throw new Error('The transport must be docked to buy an item.');\r\n        }\r\n        const expectedBalance = this.player.storehouse.items[item].balance;\r\n        const result = await this.town.buy(item, expectedBalance, `route/${this.id}`, volume, price);\r\n        this.player.storehouse.updateAccount(await Account.validate(result.embedded[`/accounts/${this.data.route.account.id}`]));\r\n        return result;\r\n    }\r\n\r\n    async exportItem(item: ItemEnumType, volume: number, price: number): Promise<void> {\r\n        if (!this.docked) {\r\n            throw new Error('The transport must be docked to export an item.');\r\n        }\r\n        const manager = new Manager({ sellVolume: volume, sellPrice: price });\r\n        await this.setManager(item, manager);\r\n    }\r\n\r\n    async importItem(item: ItemEnumType, volume: number, price: number): Promise<void> {\r\n        if (!this.docked) {\r\n            throw new Error('The transport must be docked to import an item.');\r\n        }\r\n        const manager = new Manager({ buyVolume: volume, buyPrice: price });\r\n        await this.setManager(item, manager);\r\n    }\r\n\r\n    async patchManager(item: ItemEnumType, buyPrice?: number, buyVolume?: number, sellPrice?: number, sellVolume?: number): Promise<void> {\r\n        if (!this.docked) {\r\n            throw new Error('The transport must be docked to patch a manager.');\r\n        }\r\n        if (!(item in this.data.route.managers)) {\r\n            throw new Error('The item does not have a manager.');\r\n        }\r\n        const manager = this.data.route.managers[item];\r\n        if (buyPrice !== undefined) manager.buyPrice = buyPrice;\r\n        if (buyVolume !== undefined) manager.buyVolume = buyVolume;\r\n        if (sellPrice !== undefined) manager.sellPrice = sellPrice;\r\n        if (sellVolume !== undefined) manager.sellVolume = sellVolume;\r\n        this.updateRoute(await this._client.transportsApi.setManager(this.id, item, manager));\r\n    }\r\n\r\n    async sell(item: ItemEnumType, volume: number, price: number): Promise<ItemTradeResult> {\r\n        if (!this.docked) {\r\n            throw new Error('The transport must be docked to sell an item.');\r\n        }\r\n        const expectedBalance = this.player.storehouse.items[item].balance;\r\n        const result = await this.town.sell(item, expectedBalance, `route/${this.id}`, volume, price);\r\n        this.player.storehouse.updateAccount(await Account.validate(result.embedded[`/accounts/${this.data.route.account.id}`]));\r\n        return result;\r\n    }\r\n\r\n    async setManager(item: ItemEnumType, manager: Manager): Promise<void> {\r\n        if (!this.docked) {\r\n            throw new Error('The transport must be docked to set a manager.');\r\n        }\r\n        this.updateRoute(await this._client.transportsApi.setManager(this.id, item, manager));\r\n    }\r\n\r\n    updateRoute(route: TradeRoute): void {\r\n        this.data.route = route;\r\n        this.loadImportsExports();\r\n    }\r\n\r\n    loadImportsExports(): void {\r\n        if (this.docked) {\r\n            for (const item in this.route.managers) {\r\n                const asset = this.route.account.assets[item];\r\n                const flow = this.data.route.current_flows[item];\r\n                if (this.route.managers[item].buyVolume) {\r\n                    this.imports[item] = new Import(asset, flow, item as ItemEnumType, this.route.managers[item], this.town, this);\r\n                }\r\n                if (this.route.managers[item].sellVolume) {\r\n                    this.exports[item] = new Export(asset, flow, item as ItemEnumType, this.route.managers[item], this.town, this);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class TransportList extends Array<Transport> {\r\n    byTownName(name: string): TransportList {\r\n        const transports: TransportList = new TransportList();\r\n        for (const transport of this) {\r\n            if (transport.docked && transport.town.name === name) {\r\n                transports.push(transport);\r\n            }\r\n        }\r\n        return transports;\r\n    }\r\n\r\n    searchMarkets(item: ItemEnumType): TownItem[] {\r\n        const items: TownItem[] = [];\r\n        for (const transport of this) {\r\n            if (transport.docked && item in transport.town.market) {\r\n                items.push(new TownItem(item, transport.town.market[item], transport.town));\r\n            }\r\n        }\r\n        return items;\r\n    }\r\n}\r\n\r\nexport class TownItem {\r\n    item: ItemEnumType;\r\n    marketItem: MarketItem;\r\n    town: Town;\r\n\r\n    constructor(item: ItemEnumType, marketItem: MarketItem, town: Town) {\r\n        this.item = item;\r\n        this.marketItem = marketItem;\r\n        this.town = town;\r\n    }\r\n\r\n    fetchDetails(): Promise<MarketItemDetails> {\r\n        return this.town.fetchMarketItem(this.item);\r\n    }\r\n}","// Storehouse.ts\r\nimport Client from \"../client\";\r\nimport {Building} from './building'\r\nimport { Player } from \"./player\";\r\nimport {Flow} from \"../models/flow\";\r\nimport {Account, AccountAsset} from \"../models/account\";\r\nimport {Manager} from \"../models/manager\";\r\nimport {ItemEnum} from \"../models/enums/itemEnum\";\r\nimport {ItemEnumType} from \"../schema/enums/ItemEnumSchema\";\r\nimport {ItemTradeResultType} from \"../schema/ItemTradeResultSchema\";\r\nimport { ExportsList } from './exports'\r\nimport { ImportsList } from './imports'\r\nimport { BuildingTypeEnum} from \"../models/enums/buildingTypeEnum\";\r\nimport {MarketItem, MarketItemDetails} from \"../models/market\";\r\nimport {ItemTradeResult} from \"../models/itemTrade\";\r\nimport {Item} from \"../models/item\";\r\n\r\nexport class Storehouse {\r\n    _client: Client;\r\n    player: Player;\r\n    items: Map<ItemEnumType, StorehouseItem>;\r\n    data: Building;\r\n\r\n    constructor(client: Client, player: Player) {\r\n        this._client = client;\r\n        this.player = player;\r\n        this.items = new Map<ItemEnumType, StorehouseItem>();\r\n    }\r\n\r\n    async load() {\r\n        const storehouses = this.player.buildings.byType(BuildingTypeEnum.Storehouse).concat(this.player.buildings.byType(BuildingTypeEnum.Warehouse));\r\n        if (!storehouses.length) {\r\n            throw new Error('No storehouses found.');\r\n        }\r\n\r\n        this.data = storehouses[0];\r\n        this._loadInventory();\r\n    }\r\n\r\n    get flows() {\r\n        return this.data.flows;\r\n    }\r\n\r\n    get id() {\r\n        return this.data.id;\r\n    }\r\n\r\n    get operations() {\r\n        return this.data.operations;\r\n    }\r\n\r\n    get previousFlows() {\r\n        return this.data.previous_flows;\r\n    }\r\n\r\n    async buy(item: ItemEnumType, volume: number, price: number) {\r\n        const result = await this.player.town.buy(item, this.items.get(item)?.balance, `storage/${this.data.id}`, volume, price);\r\n        const validatedAccount = await Account.validate(result.embedded[`/accounts/${this.data.inventory.account.id}`]);\r\n        this.updateAccount(validatedAccount);\r\n        return result;\r\n    }\r\n\r\n    async patchManager(item: ItemEnumType, data: any) {\r\n        await this.data.patchManager(item, data);\r\n    }\r\n\r\n    async sell(item: ItemEnumType, volume: number, price: number) {\r\n        const result = await this.player.town.sell(item, this.items.get(item)?.balance, `storage/${this.data.id}`, volume, price);\r\n        const validatedAccount = await Account.validate(result.embedded[`/accounts/${this.data.inventory.account.id}`]);\r\n        this.updateAccount(validatedAccount);\r\n        return result;\r\n    }\r\n\r\n    async setManager(item: ItemEnumType, manager: Manager) {\r\n        await this._client.buildingsApi.setManager(this.data.id, item, manager);\r\n    }\r\n\r\n    updateAccount(account: Account) {\r\n        this.data.inventory.account = account;\r\n        this._loadInventory();\r\n    }\r\n\r\n    private _loadInventory() {\r\n        this.data.items.forEach((data, item) => {\r\n            this.items.set(item, new StorehouseItem(\r\n                data,\r\n                this.player.exports.get(item) || new ExportsList(),\r\n                this.player.imports.get(item) || new ImportsList(),\r\n                item,\r\n                this.data.inventory.managers[item] || null,\r\n                this.flows.get(item, null),\r\n                this\r\n            ));\r\n        });\r\n    }\r\n}\r\n\r\nexport class StorehouseItem {\r\n\r\n    asset: AccountAsset;\r\n    exports: ExportsList;\r\n    imports: ImportsList;\r\n    item: ItemEnumType;\r\n    manager: Manager;\r\n    flow: Flow;\r\n    storehouse: Storehouse;\r\n\r\n    constructor(\r\n        asset: AccountAsset,\r\n        exports: ExportsList,\r\n        imports: ImportsList,\r\n        item: ItemEnumType,\r\n        manager: Manager,\r\n        flow: Flow,\r\n        storehouse: Storehouse\r\n    ) {\r\n        this.asset = asset;\r\n        this.exports = exports;\r\n        this.imports = imports;\r\n        this.item = item;\r\n        this.manager = manager;\r\n        this.flow = flow;\r\n        this.storehouse = storehouse;\r\n    }\r\n\r\n\r\n    get averageCost(): number {\r\n        let totalCost = 0;\r\n        let totalVolume = 0;\r\n        if (this.produced) {\r\n            totalCost += this.productionCost;\r\n            totalVolume += this.produced;\r\n        }\r\n        if (this.imported) {\r\n            totalCost += this.importCostFlowed;\r\n            totalVolume += this.imported;\r\n        }\r\n        if (this.purchased) {\r\n            totalCost += this.purchasedCost;\r\n            totalVolume += this.purchased;\r\n        }\r\n        return totalCost / totalVolume || 0;\r\n    }\r\n\r\n    get balance(): number {\r\n        return this.asset.balance;\r\n    }\r\n\r\n    get capacity(): number {\r\n        return this.asset.capacity;\r\n    }\r\n\r\n    get consumed(): number {\r\n        return this.flow ? this.flow.consumption : 0;\r\n    }\r\n\r\n    get consumptionCost(): number {\r\n        return (this.consumed * this.averageCost) || 0;\r\n    }\r\n\r\n    get exported(): number {\r\n        return this.flow ? this.flow.export || 0 : 0;\r\n    }\r\n\r\n    get exportValue(): number {\r\n        return this.exports.value;\r\n    }\r\n\r\n    get exportValueFlowed(): number {\r\n        return this.exports.valueFlowed;\r\n    }\r\n\r\n    get exportVolume(): number {\r\n        return this.exports.volume;\r\n    }\r\n\r\n    get exportVolumeFlowed(): number {\r\n        return this.exports.volumeFlowed;\r\n    }\r\n\r\n    get imported(): number {\r\n        return this.flow ? this.flow.imported || 0 : 0;\r\n    }\r\n\r\n    get importCost(): number {\r\n        return this.imports.cost;\r\n    }\r\n\r\n    get importCostFlowed(): number {\r\n        return this.imports.costFlowed;\r\n    }\r\n\r\n    get importVolume(): number {\r\n        return this.imports.volume;\r\n    }\r\n\r\n    get importVolumeFlowed(): number {\r\n        return this.imports.volumeFlowed;\r\n    }\r\n\r\n    get marketData(): MarketItem {\r\n        return this.storehouse.player.town.item(this.item);\r\n    }\r\n\r\n    get sold(): number {\r\n        return this.flow ? this.flow.sale || 0 : 0;\r\n    }\r\n\r\n    get saleValue(): number {\r\n        return this.sold * this.asset.sale_price;\r\n    }\r\n\r\n    get produced(): number {\r\n        return this.flow ? this.flow.production : 0;\r\n    }\r\n\r\n    get productionCost(): number {\r\n        return this.flow ? this.flow.production_cost || 0 : 0;\r\n    }\r\n\r\n    get purchased(): number {\r\n        return this.flow ? this.flow.purchase || 0 : 0;\r\n    }\r\n\r\n    get purchasedCost(): number {\r\n        return this.purchased * this.asset.purchase_price;\r\n    }\r\n\r\n    buy(volume: number, price: number): Promise<ItemTradeResult> {\r\n        return this.storehouse.buy(this.item, volume, price);\r\n    }\r\n\r\n    fetchMarketDetails(): Promise<MarketItemDetails> {\r\n        return this.storehouse.player.town.fetchMarketItem(this.item);\r\n    }\r\n\r\n    patchManager(data: any): Promise<void> {\r\n        return this.storehouse.patchManager(this.item, data);\r\n    }\r\n\r\n    sell(volume: number, price: number): Promise<ItemTradeResult> {\r\n        return this.storehouse.sell(this.item, volume, price);\r\n    }\r\n\r\n    setManager(manager: Manager): Promise<void> {\r\n        return this.storehouse.setManager(this.item, manager);\r\n    }\r\n}"],"mappings":"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","names":["import_axios","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","axios","import_lodash","_","Town","BuildingOperation","Recipe","Building","Recipe","Transport","exports","axios","Town","Building","BuildingOperation","Recipe","Transport"]}